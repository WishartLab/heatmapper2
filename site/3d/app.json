[{"name": "app.py", "content": "#\n# Heatmapper\n# 3D\n#\n# This file contains the Shiny application for 3D Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshiny run\n#\n# Exporting via ShinyLive is not currently supported, as pyvista\n# is not yet available in the Pyodide environment. Required libraries\n# include: openmpi, verdict, glew, alongside python libraries in requirements.txt\n# WebGL is required for this application.\n#\n\nfrom shiny import App, reactive, render, ui\nfrom pandas import DataFrame\nfrom os.path import basename\n\n# Shared functions\nfrom shared import Cache, MainTab, NavBar, FileSelection, Filter, ColumnType, TableOptions, InitializeConfig, ColorMaps, Update, Pyodide, Error, Msg\n\nif not Pyodide: from pyvista import Plotter, plotting, read_texture, read as VistaRead\n\nfrom py3Dmol import view\n\ntry:\n\tfrom user import config\nexcept ImportError:\n\tfrom config import config\n\n\ndef server(input, output, session):\n\n\t# Information regarding example files.\n\tInfo = {\n\t\t\"example1.csv\": {\n\t\t\t\"Object\": \"bunny.obj\",\n\t\t\t\"Description\": \"A bunny, mapped with random data.\"\n\t\t},\n\t\t\"texture.jpg\": {\n\t\t\t\"Object\": \"FinalBaseMesh.obj\",\n\t\t\t\"Description\": \"A human model with a sample heatmap texture applied. Sourced from https://free3d.com/3d-model/male-base-mesh-6682.html\"\n\t\t},\n\t\t\"4K8X.pdb\": {\n\t\t\t\"Object\": None,\n\t\t\t\"Description\": \"An example protein PDB from dash-bio at https://dash.plotly.com/dash-bio/molecule3dviewer\"\n\t\t}\n\t}\n\n\tSchemes = [\"spectrum\", \"b-factor\", \"b-factor (norm)\", \"ssPyMol\", \"ssJmol\", \"Jmol\", \"amino\", \"shapely\", \"nucleic\", \"chain\", \"rasmol\", \"default\", \"greenCarbon\", \"cyanCarbon\", \"magentaCarbon\", \"purpleCarbon\", \"whiteCarbon\", \"orangeCarbon\", \"yellowCarbon\", \"blueCarbon\", \"chainHetatm\"]\n\n\n\tdef HandleData(path):\n\t\t\"\"\"\n\t\t@brief A custom Data Handler for the Cache.\n\t\t@param n: The Path object to the file.\n\t\t@returns A data object from the cache.\n\t\t@info This Data Handler supports object files, and images as textures.\n\t\t\"\"\"\n\n\t\tsuffix = path.suffix\n\t\tif suffix == \".obj\": return VistaRead(path.resolve())\n\t\tif suffix == \".png\" or suffix == \".jpg\": return read_texture(path.resolve())\n\t\telse: return DataCache.DefaultHandler(path)\n\tDataCache = Cache(\"3d\", DataHandler=HandleData)\n\n\tData = reactive.value(None)\n\tValid = reactive.value(False)\n\tObject = reactive.value(None)\n\n\tInitializeConfig(config, input)\n\n\n\t@reactive.effect\n\t@reactive.event(input.SourceFile, input.File, input.Example, input.Reset, input.ID)\n\tasync def UpdateData():\n\t\t\"\"\"\n\t\t@brief Updates the Data variables when input changes.\n\t\t@info When any relevant reactive input changes, this function requests data from the Cache,\n\t\tand then invalidates the current data in the table.\n\t\t\"\"\"\n\t\tif input.SourceFile() == \"ID\":\n\t\t\tdata = await DataCache.Download(f\"https://files.rcsb.org/view/{input.ID()}.pdb\")\n\t\t\tData.set(data)\n\t\telse:\n\t\t\tData.set((await DataCache.Load(input, default=None, p=ui.Progress(), wasm_blacklist=(\".csv\", \".txt\", \".dat\", \".tsv\", \".tab\", \".xlsx\", \".xls\", \".odf\", \".png\", \".jpg\"))))\n\t\tValid.set(False)\n\n\n\t@reactive.effect\n\t@reactive.event(input.SourceFile, input.Object, input.Example)\n\tasync def UpdateObject():\n\t\t\"\"\"\n\t\t@brief Updates the Object variable when input changes.\n\t\t@info When the Object's source changes, this function fetches the most up to date information from the Cache.\n\t\t@info This function will not do anything in WebAssembly.\n\t\t\"\"\"\n\t\tif type(GetData()) != str:\n\t\t\tObject.set(await DataCache.Load(input,\n\t\t\t\tsource_file=input.Object(),\n\t\t\t\texample_file=Info[input.Example()][\"Object\"],\n\t\t\t\tdefault=None,\n\t\t\t\tp=ui.Progress(),\n\t\t\t\tp_name=\"object\",\n\t\t\t\twasm=False\n\t\t\t))\n\n\n\tdef GetData(): return Table.data_view() if Valid() else Data()\n\n\n\t@output\n\t@render.data_frame\n\tdef Table():\n\t\tdf = Data()\n\t\ttry:\n\t\t\tgrid = render.DataGrid(Data(), editable=True)\n\t\t\tValid.set(True)\n\t\t\treturn grid\n\t\texcept TypeError:\n\t\t\tError(\"The provided input format cannot be rendered\")\n\n\n\t@Table.set_patch_fn\n\tdef UpdateTable(*, patch: render.CellPatch) -> render.CellValue:\n\t\tif input.Type() == \"Integer\": value = int(patch[\"value\"])\n\t\telif input.Type() == \"Float\": value = float(patch[\"value\"])\n\t\telse: value = patch[\"value\"]\n\t\treturn value\n\n\n\tdef PDBViewer(source, p):\n\t\t\"\"\"\n\t\t@brief Returns an HTML string containing the Py3DMol.js viewer of the source.\n\t\t@param source: The source containing PDB data as a string.\n\t\t@param p: The progress bar.\n\t\t@returns An HTML string that should be wrapped with ui.HTML\n\t\t\"\"\"\n\n\t\t# Used for caching.\n\t\tglobal_inputs = [\n\t\t\tinput.File() if input.SourceFile() == \"Upload\" else input.ID() if input.SourceFile() == \"ID\" else input.Example(),\n\t\t\tconfig.Size(),\n\t\t\tconfig.ColorScheme(),\n\t\t\tconfig.PStyle(),\n\t\t\tconfig.PFeatures(),\n\t\t\tconfig.Thickness(),\n\t\t\tconfig.Width(),\n\t\t\tconfig.Opacity(),\n\t\t\tconfig.Radius(),\n\t\t\tconfig.Scale(),\n\t\t\tconfig.SurfaceOpacity(),\n\t\t\tconfig.SurfaceType(),\n\t\t\tconfig.SurfaceScheme(),\n\t\t]\n\n\t\tif not DataCache.In(global_inputs):\n\n\t\t\tdef GenerateScheme(initial_scheme, function_declared=False):\n\t\t\t\t\"\"\"\n\t\t\t\t@brief Py3DMol has a color, colorscheme, and colorfunc attribute. This function puts the right one in\n\t\t\t\twithout cluttering the interface with three different options.\n\t\t\t\t@param initial_scheme: The value of the scheme. Spectrum is a color, B-Color requires a function, all others\n\t\t\t\tuse a colorscheme\n\t\t\t\t@param function_declared: Since there is a colorscheme for both the heatmap and the structure, we can accidentally\n\t\t\t\tredefine the same JavaScript function twice if they both use the same B-Color scheme. This avoids that.\n\t\t\t\t\"\"\"\n\t\t\t\tprop = \"color\"\n\t\t\t\tscheme = initial_scheme\n\n\t\t\t\t# B Color requires a custom function.\n\t\t\t\tif scheme == \"b-factor\" or scheme == \"b-factor (norm)\":\n\n\t\t\t\t\t# Initial weights\n\t\t\t\t\tdarkblue, blue, lightblue, white, orange, red = 5, 10, 15, 20, 40, 50\n\n\t\t\t\t\t# If we're normalizing, get the average B-Factor, then assign that as white.\n\t\t\t\t\tif \"norm\" in scheme:\n\n\t\t\t\t\t\t# For caching.\n\t\t\t\t\t\tentry = [input.File() if input.SourceFile() == \"Upload\" else input.ID() if input.SourceFile() == \"ID\" else input.Example()]\n\t\t\t\t\t\ta = 0.0\n\t\t\t\t\t\tl = 0\n\t\t\t\t\t\tif not DataCache.In(entry):\n\t\t\t\t\t\t\tp.inc(message=\"Normalizing...\")\n\t\t\t\t\t\t\tl = 0\n\t\t\t\t\t\t\t# Get all the Atoms from the string, split by spaces, and remove empty entries.\n\t\t\t\t\t\t\tfor atom in [atom for atom in source.split(\"\\n\") if atom.startswith(\"ATOM\")]:\n\t\t\t\t\t\t\t\tentries = list(filter(None, atom.split(\" \")))\n\n\t\t\t\t\t\t\t\t# This should be B-Factor, but sometimes the B-Factor is absent, in which case its an element.\n\t\t\t\t\t\t\t\tif not entries[10].isalpha():\n\t\t\t\t\t\t\t\t\ta += float(entries[10])\n\t\t\t\t\t\t\t\t\tl += 1\n\t\t\t\t\t\t\ta /= l\n\n\t\t\t\t\t\t\t# White is the average\n\t\t\t\t\t\t\tDataCache.Store((a * 0.25, a * 0.50, a * 0.75, a, a * 1.25, a * 1.5), entry)\n\t\t\t\t\t\tdarkblue, blue, lightblue, white, orange, red = DataCache.Get(entry)\n\t\t\t\t\t\tMsg(f\"Using normalized blue/white/red cutoffs at {lightblue:.2f}/{white:.2f}/{orange:.2f}\")\n\t\t\t\t\t\tscheme = \"NormalizedScheme\"\n\t\t\t\t\telse: scheme = \"Scheme\"\n\n\t\t\t\t\t# Declare the function.\n\t\t\t\t\tif not function_declared:\n\t\t\t\t\t\tviewer.startjs += f\"\"\"\\n\n\t\t\t\t\t\t\tlet {scheme} = function(atom) {{\n\t\t\t\t\t\t\t\tif (atom.b < {darkblue}) return \"darkblue\"\n\t\t\t\t\t\t\t\tif (atom.b < {blue}) return \"blue\"\n\t\t\t\t\t\t\t\telse if (atom.b < {lightblue}) return \"lightblue\"\n\t\t\t\t\t\t\t\telse if (atom.b < {white}) return \"white\"\n\t\t\t\t\t\t\t\telse if (atom.b < {orange}) return \"orange\"\n\t\t\t\t\t\t\t\telse if (atom.b < {red}) return \"red\"\n\t\t\t\t\t\t\t\telse return \"darkred\"\n\t\t\t\t\t\t\t}}\\n\"\"\"\n\t\t\t\t\tprop = \"colorfunc\"\n\t\t\t\telif scheme != \"spectrum\": prop = \"colorscheme\"\n\t\t\t\treturn prop, scheme\n\n\t\t\tviewer = view(data=source, width=f\"{input.Size()}vw\", height=f\"{input.Size()}vh\")\n\n\t\t\theatmap_property, heatname_name = GenerateScheme(config.ColorScheme())\n\n\t\t\tp.inc(message=\"Styling...\")\n\t\t\tviewer.setStyle({config.PStyle().lower(): {\n\t\t\t\theatmap_property: heatname_name,\n\t\t\t\t\"arrows\": \"Arrows\" in config.PFeatures(),\n\t\t\t\t\"style\": \"trace\" if \"Trace\" in config.PFeatures() else \"rectangle\",\n\t\t\t\t\"thickness\": config.Thickness(),\n\t\t\t\t\"tubes\": \"Tubes\" in config.PFeatures(),\n\t\t\t\t\"width\": config.Width(),\n\t\t\t\t\"opacity\": config.Opacity(),\n\t\t\t\t\"dashedBonds\": \"Dashed Bonds\" in config.PFeatures(),\n\t\t\t\t\"showNonBonded\": \"Show Non-Bonded\" in config.PFeatures(),\n\t\t\t\t\"singleBonds\": \"Single Bonds\" in config.PFeatures(),\n\t\t\t\t\"radius\": config.Radius(),\n\t\t\t\t\"scale\": config.Scale(),\n\t\t\t}})\n\n\t\t\tsurface_property, surface_name = GenerateScheme(config.SurfaceScheme(), function_declared=config.SurfaceScheme() == config.ColorScheme())\n\t\t\tviewer.addSurface(config.SurfaceType(), {\"opacity\": config.SurfaceOpacity(), surface_property: surface_name})\n\n\t\t\tif heatmap_property == \"colorfunc\": viewer.startjs = viewer.startjs.replace(f'\"{heatname_name}\"', f'{heatname_name}')\n\t\t\tif surface_property == \"colorfunc\": viewer.startjs = viewer.startjs.replace(f'\"{surface_name}\"', f'{surface_name}')\n\n\n\t\t\tp.inc(message=\"Exporting...\")\n\t\t\tDataCache.Store(viewer.write_html(), global_inputs)\n\n\t\treturn DataCache.Get(global_inputs)\n\n\n\tdef ModelViewer(source, p):\n\t\t\"\"\"\n\t\t@brief Generates an HTML string of the PyVista Model viewer.\n\t\t@param source: The data to be applied to the object.\n\t\t@param p: The progress bar.\n\t\t@returns An HTML string that should be wrapped with ui.HTML\n\t\t@info Object will also need to be defined.\n\t\t\"\"\"\n\t\tif Pyodide:\n\t\t\tError(f\"Cannot render objects in WebAssembly! Please use the Server version for this functionality.\")\n\t\t\treturn\n\n\t\t# For Caching.\n\t\tinputs = [\n\t\t\tinput.File() if input.SourceFile() == \"Upload\" else input.Example(),\n\t\t\tconfig.Style(),\n\t\t\tconfig.Opacity(),\n\t\t\tconfig.Features(),\n\t\t\tconfig.ColorMap(),\n\t\t\tconfig.Colors(),\n\t\t]\n\n\t\tif not DataCache.In(inputs):\n\t\t\tmodel = Object()\n\t\t\tif model is None: return\n\n\t\t\tp.inc(message=\"Plotting...\")\n\t\t\tpl = Plotter()\n\n\t\t\tstyle = config.Style().lower()\n\t\t\topacity = config.Opacity()\n\t\t\tfeatures = config.Features()\n\t\t\tcmap = config.ColorMap().lower()\n\t\t\tcolors = config.Colors()\n\n\t\t\t# If there's no source, just render the model\n\t\t\tif source is None:\n\t\t\t\tpl.add_mesh(\n\t\t\t\t\tmodel,\n\t\t\t\t\tstyle=style,\n\t\t\t\t\topacity=opacity,\n\t\t\t\t\tshow_edges=\"Edges\" in features,\n\t\t\t\t\tlighting=\"Lighting\" in features,\n\t\t\t\t\tinterpolate_before_map=\"Interpolation\" in features,\n\t\t\t\t\tsmooth_shading=\"Smooth Shading\" in features,\n\t\t\t\t)\n\n\t\t\t# If are data source is a table, render it as a heatmap.\n\t\t\telif type(source) is DataFrame:\n\t\t\t\tvalues = source[Filter(source.columns, ColumnType.Name)]\n\t\t\t\tpl.add_mesh(\n\t\t\t\t\tmodel,\n\t\t\t\t\tscalars=values,\n\t\t\t\t\tstyle=style,\n\t\t\t\t\tcmap=cmap,\n\t\t\t\t\topacity=opacity,\n\t\t\t\t\tn_colors=colors,\n\t\t\t\t\tshow_edges=\"Edges\" in features,\n\t\t\t\t\tlighting=\"Lighting\" in features,\n\t\t\t\t\tinterpolate_before_map=\"Interpolation\" in features,\n\t\t\t\t\tsmooth_shading=\"Smooth Shading\" in features,\n\t\t\t\t)\n\n\t\t\t# If we have a texture, map it.\n\t\t\telif type(source) is plotting.texture.Texture:\n\t\t\t\tmesh = model.texture_map_to_plane()\n\t\t\t\tpl.add_mesh(mesh, texture=source)\n\n\t\t\t# Exporting as None returns the HTML as a file handle, which we read.\n\t\t\tp.inc(message=\"Exporting...\")\n\t\t\tDataCache.Store(pl.export_html(filename=None).read(), inputs)\n\t\treturn DataCache.Get(inputs)\n\n\n\tdef GenerateHeatmap():\n\t\t\"\"\"\n\t\t@brief Generates the Heatmap based on input, returns HTML\n\t\t@returns HTML of the heatmap.\n\t\t\"\"\"\n\t\twith ui.Progress() as p:\n\n\t\t\t# Get the model and data.\n\t\t\tp.inc(message=\"Loading input...\")\n\n\t\t\tsource = GetData()\n\t\t\tif source is None: return\n\n\t\t\tif type(source) == str:\n\t\t\t\treturn PDBViewer(source, p)\n\t\t\treturn ModelViewer(source, p)\n\n\n\t@output\n\t@render.ui\n\tdef HeatmapReactive(): return ui.HTML(GenerateHeatmap())\n\n\n\t@reactive.effect\n\t@reactive.event(input.ExampleInfo)\n\tdef ExampleInfo():\n\t\tMsg(ui.HTML(Info[input.Example()][\"Description\"]))\n\n\n\t@render.download(filename=\"table.csv\")\n\tdef DownloadTable():\n\t\tdf = GetData()\n\t\tif df is not None:\n\t\t\tyield df.to_string()\n\n\n\t@render.download(filename=\"heatmap.html\")\n\tdef DownloadHeatmap():\n\t\thtml = GenerateHeatmap()\n\t\tif html is not None:\n\t\t\tyield html\n\n\n\t@output\n\t@render.ui\n\tdef ConditionalElements():\n\t\telements = []\n\t\tdata = GetData()\n\n\t\tif data is None: return\n\n\t\tif type(data) == str or input.SourceFile() == \"ID\":\n\t\t\telements += [\n\t\t\t\tui.HTML(\"<b>Heatmap</b>\"),\n\t\t\t\tconfig.ColorScheme.UI(ui.input_select, id=\"ColorScheme\", label=\"Scheme\", choices=Schemes),\n\t\t\t\tconfig.Opacity.UI(ui.input_slider, id=\"Opacity\", label=\"Opacity\", min=0.0, max=1.0, step=0.1),\n\t\t\t\tui.HTML(\"<b>Surface</b>\"),\n\t\t\t\tconfig.SurfaceScheme.UI(ui.input_select, id=\"SurfaceScheme\", label=\"Scheme\", choices=Schemes),\n\t\t\t\tconfig.SurfaceOpacity.UI(ui.input_slider, id=\"SurfaceOpacity\", label=\"Opacity\", min=0.0, max=1.0, step=0.1),\n\t\t\t\tui.HTML(\"<b>Customization</b>\"),\n\t\t\t\tconfig.PStyle.UI(ui.input_select, id=\"PStyle\", label=\"Style\", choices=[\"Cartoon\", \"Stick\", \"Sphere\", \"Line\", \"Cross\"]),\n\t\t\t\tconfig.SurfaceType.UI(ui.input_select, id=\"SurfaceType\", label=\"Surface Type\", choices=[\"VDW\", \"MS\", \"SAS\", \"SES\"]),\n\t\t\t\tconfig.Thickness.UI(ui.input_numeric, id=\"Thickness\", label=\"Thickness\", min=0, max=10, step=0.1),\n\t\t\t\tconfig.Width.UI(ui.input_numeric, id=\"Width\", label=\"Width\", min=0, max=10, step=1),\n\t\t\t\tconfig.Radius.UI(ui.input_numeric, id=\"Radius\", label=\"Radius\", min=0, max=5, step=0.05),\n\t\t\t\tconfig.Scale.UI(ui.input_numeric, id=\"Scale\", label=\"Scale\", min=0, max=10, step=1),\n\t\t\t\tconfig.Size.UI(ui.input_slider, id=\"Size\", label=\"Size\", min=1, max=100, step=1),\n\t\t\t\tui.HTML(\"<b>Features</b>\"),\n\t\t\t\tconfig.PFeatures.UI(ui.input_checkbox_group, make_inline=False, id=\"PFeatures\", label=None, choices=[\"Dashed Bonds\", \"Show Non-Bonded\", \"Single Bonds\", \"Tubes\", \"Trace\"]),\n\t\t\t]\n\n\t\telse:\n\t\t\telements.append(ui.panel_conditional(\"input.SourceFile === 'Upload'\", ui.input_file(\"Object\", \"Choose an Object File\", accept=[\".obj\"], multiple=False)))\n\t\t\tif type(data) == DataFrame:\n\t\t\t\telements += [\n\t\t\t\t\tui.HTML(\"<b>Heatmap</b>\"),\n\t\t\t\t\tconfig.Opacity.UI(ui.input_slider, id=\"Opacity\", label=\"Opacity\", min=0.0, max=1.0, step=0.1),\n\t\t\t\t\tconfig.Style.UI(ui.input_select, id=\"Style\", label=\"Style\", choices=[\"Surface\", \"Wireframe\", \"Points\"]),\n\t\t\t\t\tui.HTML(\"<b>Colors</b>\"),\n\t\t\t\t\tconfig.Colors.UI(ui.input_slider, id=\"Colors\", label=\"Number\", value=256, min=1, max=256, step=1),\n\t\t\t\t\tconfig.ColorMap.UI(ui.input_select, id=\"ColorMap\", label=\"Map\", choices=ColorMaps),\n\t\t\t\t\tui.HTML(\"<b>Features</b>\"),\n\t\t\t\t\tconfig.Features.UI(ui.input_checkbox_group, make_inline=False, id=\"Features\", label=None, choices=[\"Edges\", \"Lighting\", \"Interpolation\", \"Smooth Shading\"]),\n\t\t\t]\n\n\t\treturn elements\n\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\t\t\tFileSelection(\n\t\t\t\texamples={\"4K8X.pdb\": \"Example 1\", \"example1.csv\": \"Example 2\", \"texture.jpg\": \"Example 3\"},\n\t\t\t\ttypes=[\".csv\", \".txt\", \".dat\", \".tsv\", \".tab\", \".xlsx\", \".xls\", \".odf\", \".png\", \".jpg\", \".pdb\"],\n\t\t\t\tproject=\"3D\",\n\t\t\t\textras=[\"ID\"]),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'ID'\",\n\t\t\t\tui.input_text(id=\"ID\", value=\"1upp\", label=\"PDB ID\"),\n\t\t\t),\n\n\t\t\tTableOptions(config),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.MainTab === 'HeatmapTab'\",\n\n\t\t\t\tui.output_ui(id=\"ConditionalElements\"),\n\n\t\t\t\tui.download_button(id=\"DownloadHeatmap\", label=\"Download\"),\n\t\t\t),\n\t\t\tpadding=\"10px\",\n\t\t\tgap=\"20px\",\n\t\t\twidth=\"250px\",\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tMainTab(m_type=ui.output_ui),\n\t\theight=\"90vh\",\n\t)\n)\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "config.py", "content": "#\n# Heatmapper \n# 3D Configuration\n#\n# This file contains configuration for 3D. \n\n\nfrom shared import Config, ConfigHandler\n\nconfig = ConfigHandler({\n\n\t# Any value from 0.0-1.0\n\t\"Opacity\": Config(value=1.0),\n\n\t# Any numerical value between 1 and 256.\n\t\"Colors\": Config(value=256),\n\n\t# \"Viridis\", \"Plasma\", \"Inferno\", \"Magma\", \"Cividis\"\n\t\"ColorMap\": Config(selected=\"Viridis\"),\n\n\t# \"Integer\" \"Float\" \"String\"\n\t\"Type\": Config(selected=\"Integer\"),\n\n\t# \"Surface\", \"Wireframe\", \"Points\"\n\t\"Style\": Config(selected=\"Surface\"),\n\n\t# Combination of \"Edges\", \"Lighting\", \"Interpolation\", \"Smooth Shading\"\n\t\"Features\": Config(selected=[\"Lighting\", \"Interpolation\", \"Smooth Shading\"]),\n\n\t# \"Cartoon\", \"Stick\", \"Sphere\", \"Line\"\n\t\"PStyle\": Config(selected=\"Cartoon\"),\n\n\t# See 3D's ConditionalElements function for details\n\t\"ColorScheme\": Config(selected=\"spectrum\"),\n\t\"SurfaceScheme\": Config(selected=\"spectrum\"),\n\n\t# Can vary depending on PStyle. See ConditionalElements for details.\n\t\"PFeatures\": Config(selected=[]),\n\n\t# Any value from 0-10\n\t\"Thickness\": Config(value=0.4),\n\n\t# Any value from 0-10\n\t\"Width\": Config(value=3),\n\n\t# Any value from 0-10\n\t\"Radius\": Config(value=0.25),\n\n\t# Any value from 0-10\n\t\"Scale\": Config(value=1),\n\n\t# Any numerical value\n\t\"Size\": Config(value=75),\n\n\t# Any value from 0.0-1.0\n\t\"SurfaceOpacity\": Config(value=0.0),\n\n\t# VDW, MS, SAS, or SES\n\t\"SurfaceType\": Config(selected=\"VDS\")\n})", "type": "text"}, {"name": "requirements.txt", "content": "# shinylive will try and pull these, but they aren't supported in WASM yet\n# pyvista\n# trame\n# vtk\n# trame-vtk\n# meshio\n# pywebview\n# trame-vuetify\n# nest_asyncio\npy3Dmol\n", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import ui, reactive\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom tempfile import NamedTemporaryFile\nfrom sys import modules\nfrom pathlib import Path\nfrom enum import Enum\nfrom os.path import exists\nfrom copy import deepcopy\n\n# Used for fetching web resources in a variety of fashions.\nURL = \"https://wishartlab.github.io/heatmapper2\"\nRaw = \"https://raw.githubusercontent.com/WishartLab/heatmapper2/main\"\n\n# Define the Server and Port of the Shiny instances (Port is incremented)\n# Change these if Heatmapper is running on a server.\nServer = \"http://35.208.86.138\"\nPort = 8000\n\n# Detect the running environment\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\n\tasync def fetch(url):\n\t\tresponse = await pyfetch(url)\n\t\tif response.ok: return (await response.bytes())\n\t\telse:\n\t\t\tError(\"Could not download file\")\n\t\t\treturn None\nelse:\n\tfrom urllib.request import urlopen\n\tPyodide = False\n\tasync def fetch(url):\n\t\ttry: return urlopen(url).read()\n\t\texcept Exception:\n\t\t\tError(\"Could not download file!\")\n\t\t\treturn None\n\n# Shared Values\nColors = [\"Blue\", \"Orange\", \"Green\", \"Red\", \"Purple\", \"Brown\", \"Pink\", \"Gray\", \"Olive\", \"Cyan\", \"White\", \"Yellow\"]\nDistanceMethods = [\"Braycurtis\", \"Canberra\", \"Chebyshev\", \"Cityblock\", \"Correlation\", \"Cosine\", \"Dice\", \"Euclidean\", \"Hamming\", \"Jaccard\", \"Jensenshannon\", \"Kulczynski1\", \"Matching\", \"Minkowski\", \"Rogerstanimoto\", \"Russellrao\", \"Seuclidean\", \"Sokalmichener\", \"Sokalsneath\", \"Sqeuclidean\", \"Yule\"]\nInterpolationMethods = [\"None\", \"Antialiased\", \"Nearest\", \"Bilinear\", \"Bicubic\", \"Spline16\", \"Spline36\", \"Hanning\", \"Hamming\", \"Hermite\", \"Kaiser\", \"Quadric\", \"Catrom\", \"Gaussian\", \"Bessel\", \"Mitchell\", \"Sinc\", \"Lanczos\", \"Blackman\"]\nClusteringMethods = [\"Single\", \"Complete\", \"Average\", \"Weighted\", \"Centroid\", \"Median\", \"Ward\"]\nColorMaps = [\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\"]\n\nclass ColumnType(Enum): Time = 0; Name = 1; Value = 2; Longitude = 3; Latitude = 4; X = 5; Y = 6; Z = 7; Cluster = 8; Free = 9; Spatial = 10; NameGeoJSON = 11;\nColumns = {\n\tColumnType.Time: {\"time\", \"date\", \"year\"},\n\tColumnType.Name: {\"name\", \"orf\", \"uniqid\", \"face\", \"triangle\", \"iso_code\", \"continent\", \"country\", \"location\"},\n\tColumnType.Value: {\"value\", \"weight\", \"intensity\", \"in_tissue\"},\n\tColumnType.Longitude: {\"longitude\", \"long\"},\n\tColumnType.Latitude: {\"latitude\", \"lat\"},\n\tColumnType.X: {\"x\"},\n\tColumnType.Y: {\"y\"},\n\tColumnType.Z: {\"z\"},\n\tColumnType.Cluster: {\"cell type\", \"celltype_mapped_refined\", \"cluster\", \"cell_class\", \"cell_subclass\", \"cell_cluster\"},\n\tColumnType.Free: {None},\n\tColumnType.Spatial: {\"spatial\"},\n\tColumnType.NameGeoJSON: {\"name\", \"admin\", \"iso_a3\", \"iso_a2\", \"iso\"}\n\t}\n\n\ndef Filter(columns, ctype: ColumnType, good: list = [], id=None, all=False):\n\t\"\"\"\n\t@brief Filters available column names based on what input we want\n\t@param columns: The columns of the DataFrame (Usually just df.columns)\n\t@param ctype: The type of column we're looking for (Look at the ColumnType Enum)\n\t@param good: A list of column names on top of those defined by the type to be included\n\t@param id: An element id to update with a new value.\n\t@param all: Return all matches columns\n\t@return: A list of column names to use.\n\n\t@info This purpose of this function is to try and remove irrelevant columns from user selection,\n\tbut returning everything if by filtering so we remove all the columns. In essence, it folds the case\n\tof all columns, and performs a set intersection on the required column type. This set is then returned\n\tto the case of the original columns, and then good and bad are applied (Therefore, they are case-sensitive)\n\tSince both good and bad are applied after the intersection, they don't need to be valid names (So long as)\n\tthe application can handle that exception. Look at Geocoordinate to see how it uses a \"None\" and \"Uniform\"\n\tvalue in the good list, despite these values both not a valid ValueColumn, and not existing in the data.\n\n\tThe logic for the UI updating can be confusing, but in essence we don't just want to return the good\n\tlist, because that means we removed all actual columns. If this happens, we return all the columns, and\n\tadd the good list onto the START (So its the default), that way users can choose a column if Heatmapper\n\tdoesn't like their column names.\n\t\"\"\"\n\n\t# Fold cases\n\tfolded = [column.lower() for column in columns]\n\toptions = set(folded) & Columns[ctype]\n\tindices = [folded.index(value) for value in options]; indices.sort()\n\treassembled = [columns[index] for index in indices] + good\n\n\tif id:\n\t\tif reassembled == good:\n\t\t\toptions = set(folded)\n\t\t\tfor type in Columns:\n\t\t\t\tif type != ctype: options -= Columns[type]\n\t\t\tindices = [folded.index(value) for value in options]; indices.sort()\n\t\t\treassembled = good + [columns[index] for index in indices]\n\t\tui.update_select(id=id, choices=reassembled)\n\tif all: return reassembled\n\treturn reassembled[0] if reassembled and len(reassembled) > 0 else None\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef HandleDataFrame(path, function):\n\t\t\"\"\"\n\t\t@brief Handle DataFrame's\n\t\t@param i: The binary of the file\n\t\t@param function: The pandas function to use to read the file.\n\t\t@returns A DataFrame\n\t\t\"\"\"\n\n\t\t# Read the table once.\n\t\tdf = function(path.resolve()).fillna(0)\n\n\t\t# If the first column value is a float, we assume it's data, and not column names.\n\t\t# Re-read the DataFrame with generic column names instead\n\t\ttry:\n\t\t\tfloat(df.columns[0])\n\t\t\tdf = function(path.resolve(), header=None, names=[f\"Column {i}\" for i in range(df.shape[1])])\n\t\texcept ValueError: pass\n\t\treturn df\n\n\n\t@staticmethod\n\tdef DefaultHandler(path):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle CSVs, Excel files, Tables, and all other files will simply\n\t\tbe stored as strings of the file content\n\n\t\t@param n: The path to the file\n\t\t@returns: An object.\n\t\t\"\"\"\n\n\t\tsuffix = path.suffix\n\t\tif suffix == \".csv\": return Cache.HandleDataFrame(path, read_csv)\n\t\telif suffix in {\".xlsx\", \".xls\", \".odf\"}: return Cache.HandleDataFrame(path, read_excel)\n\t\telif suffix in {\".txt\", \".dat\", \".tsv\", \".tab\"}: return Cache.HandleDataFrame(path, read_table)\n\t\telse: return open(path.resolve(), \"r\").read()\n\n\n\tasync def _local(self, url):\n\t\tif not exists(url): return None\n\t\treturn open(url, \"rb\").read()\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary is the unprocessed, fetched web resources\n\t\tself._primary = {}\n\n\t\t# The objects are anything that applications want to store\n\t\tself._objects = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself._download = fetch\n\t\t\tself._source = f\"{Raw}/{project}/example_input/\"\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself._download = self._local\n\t\t\tself._source = \"../example_input/\"\n\n\n\tasync def Download(self, n):\n\t\t\"\"\"\n\t\t@brief Downloads any arbitrary URL and stores it in the cache\n\t\t@param n: The URL name\n\t\t@returns The handled data\n\n\t\t\"\"\"\n\t\tif n not in self._primary:\n\t\t\traw = await (fetch(n) if n.startswith(\"https://\") else self._download(n))\n\t\t\tif raw is None: return None\n\t\t\ttemp = NamedTemporaryFile(suffix=Path(n).suffix);\n\t\t\ttemp.write(raw);\n\t\t\ttemp.seek(0)\n\t\t\tself._primary[n] = self._handler(Path(temp.name))\n\t\ttry: return deepcopy(self._primary[n])\n\t\texcept AttributeError: return self._primary[n]\n\n\n\tasync def Load(self,\n\t\tinput,\n\t\tsource_file=None,\n\t\texample_file=None,\n\t\tsource=None,\n\t\tinput_switch=None,\n\t\tupload=\"Upload\",\n\t\texample=\"Example\",\n\t\tdefault=DataFrame(),\n\t\tp=None,\n\t\tp_name=\"file\",\n\t\twasm=True,\n\t\twasm_blacklist=tuple()\n\t\t):\n\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@param source_file: The input ID that should be used to fetch the file (Defaults to input.File() if None)\n\t\t@param example_file: The input ID that should be used to fetch th example (Defaults to input.Example() if None)\n\t\t@param input_switch:\tThe input ID to check for Upload/Example/Other. The value is compared against \"Upload\" for user\n\t\t\t\t\t\t\t\t\t\t\t\t\tuploaded items, and defaults to fetching example_file otherwise. (Defaults to input.SourceFile())\n\t\t@param upload: The value of the input_switch such that we should fetch a source file from source_file\n\t\t@param example: The value of the input_switch such that we should fetch an example from example_file\n\t\t@param default:\tThe object that should be returned if files cannot be fetched. Ensures that Load will always return an\n\t\t\t\t\t\t\t\t\t\tobject, avoiding the needing to check output. Defaults to a DataFrame. The object should be able to\n\t\t\t\t\t\t\t\t\t\tinitialize without arguments.\n\t\t@param p: A progress bar to increment; optional.\n\t\t@param p_name: What we're fetching, to be displayed in the progress bar; optional\n\t\t@param wasm: Whether this fetch can run in WebAssembly\n\t\t@param wasm_blacklist: A tuple of file extensions that should not be fetched in WebAssembly.\n\t\t@returns The data if it exists; default if no file can be found; 0 if there's a WebAssembly violation\n\t\t\"\"\"\n\n\t\tif not wasm and Pyodide:\n\t\t\tif p: p.close()\n\t\t\treturn 0\n\n\t\tif source_file is None: source_file = input.File()\n\t\tif example_file is None: example_file = input.Example()\n\t\tif source is None: source = self._source\n\t\tif input_switch is None: input_switch = input.SourceFile()\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input_switch == upload:\n\t\t\tif p: p.inc(message=f\"Loading Uploaded {p_name}...\")\n\t\t\tfile: list[FileInfo] | None = source_file\n\t\t\tif file is None:\n\t\t\t\tif p: p.close()\n\t\t\t\treturn default\n\n\t\t\tif p: p.inc(message=f\"Handling {p_name}...\")\n\t\t\t# The datapath can be immediately used to load examples, but we explicitly need to use\n\t\t\t# Local as a user uploaded file will always be fetched on disk.\n\t\t\tn = str(file[0][\"datapath\"])\n\t\t\tif n.endswith(wasm_blacklist) and Pyodide:\n\t\t\t\tif p: p.close()\n\t\t\t\treturn 0\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(Path(n))\n\n\t\t# Example files, conversely, can be on disk or on a server depending on whether we're in a WASM environment.\n\t\telif input_switch == example:\n\t\t\tif p: p.inc(message=f\"Fetching {p_name}...\")\n\n\t\t\t# If we explicitly provide a URL, use it, but only in Pyodide (We still assume the file exists on disk when running\n\t\t\t# in server-mode).\n\t\t\tif example_file.startswith(\"https://\"):\n\t\t\t\tn = example_file if Pyodide else str(source + example_file.split(\"/\")[-1])\n\t\t\telse:\n\t\t\t\tn = str(source + example_file)\n\n\t\t\tif n.endswith(wasm_blacklist) and Pyodide:\n\t\t\t\tif p: p.close()\n\t\t\t\treturn 0\n\n\t\t\tif p: p.close()\n\t\t\treturn await self.Download(n)\n\n\t\t# If the application has a unique method of input (IE 3D's ID, don't handle it.)\n\t\telse:\n\t\t\tif p: p.close()\n\t\t\treturn None\n\n\t\tif p: p.close()\n\t\t# If the object cannot be copied, then we can just return it directly\n\t\ttry:\n\t\t\treturn deepcopy(self._primary[n])\n\t\texcept AttributeError:\n\t\t\treturn self._primary[n]\n\n\n\tdef Store(self, object, inputs):\n\t\t\"\"\"\n\t\t@brief Store arbitrary data in the Cache.\n\t\t@param object: The object to store\n\t\t@param inputs: A list of values that compose a hash of the object.\n\t\t\"\"\"\n\t\th = \"\".join(str(i) for i in inputs)\n\t\tself._objects[h] = object\n\n\n\tdef Get(self, inputs):\n\t\t\"\"\"\n\t\t@brief Retrieve arbitrary data in the Cache.\n\t\t@param inputs: A list of values that compose a hash of the object.\n\t\t\"\"\"\n\t\th = \"\".join(str(i) for i in inputs)\n\t\tif h in self._objects:\n\t\t\t\treturn self._objects[h]\n\t\telse: return None\n\n\tdef In(self, inputs):\n\t\th = \"\".join(str(i) for i in inputs)\n\t\treturn h in self._objects\n\n\ndef NavBar():\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\tSources = {\n\t\t\"expression\": f\"{URL}/site/expression/index.html\" if Pyodide else f\"{Server}:{Port}\",\n\t\t\"pairwise\": f\"{URL}/site/pairwise/index.html\" if Pyodide else f\"{Server}:{Port + 1}\",\n\t\t\"image\": f\"{URL}/site/image/index.html\" if Pyodide else f\"{Server}:{Port + 2}\",\n\t\t\"geomap\": f\"{URL}/site/geomap/index.html\" if Pyodide else f\"{Server}:{Port + 3}\",\n\t\t\"geocoordinate\": f\"{URL}/site/geocoordinate/index.html\" if Pyodide else f\"{Server}:{Port + 4}\",\n\t\t\"3d\": f\"{Server}:{Port + 5}\",\n\t\t\"spatial\": f\"{Server}:{Port + 6}\",\n\t}\n\n\treturn (\n\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\t\tui.navset_bar(\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"expression\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"pairwise\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"image\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Image</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"geomap\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"geocoordinate\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"3d\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">3D</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"spatial\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Spatial</a>')),\n\t\t\tui.nav_control(ui.HTML('<a href=https://github.com/WishartLab/heatmapper2/wiki target=\"_blank\" rel=\"noopener noreferrer\">About</a>')),\n\t\t\tui.nav_spacer(),\n\t\t\tui.nav_control(ui.input_dark_mode(id=\"mode\")),\n\t\t\ttitle=ui.HTML(\n\t\t\t\tf'<a href=\"{URL}\" target=\"_blank\" rel=\"noopener noreferrer\"> \\\n\t\t\t\t\t<img src=\"{Raw}/site/logo.png\" alt=\"Heatmapper\"> \\\n\t\t\t\t</a>'),\n\t\t),\n\t)\n\n\ndef FileSelection(examples, types, upload_label=None, multiple=False, default=\"Upload\", project=\"Overview\", extras=[]):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@param upload_label: The label for the upload input. Useful to define specifically what kind of files are needed\n\t@param multiple: Whether to accept multiple files.\n\t@param default: Whether to start on the example, or upload dialog\n\t@param project: The name of a project, to specify a specified header within the Interface documentation\n\t@param extras: Extra options for giving the application information no render. You are responsible for handling it.\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t@info multiple=True is not handled properly by the Cache. You will need to create a function that properly handles\n\t\teach file (See spatial for an implementation)\n\t@info If you're examples are large files, or require significant computation, you may want to switch it to Upload instead.\n\t\"\"\"\n\n\treturn [\n\t\tui.HTML(f\"<a href='https://github.com/WishartLab/heatmapper2/wiki/Interface#{project}' target='_blank' rel='noopener noreferrer'>Help</a>\"),\n\n\t\tui.input_radio_buttons(\n\t\t\tid=\"SourceFile\",\n\t\t\tlabel=ui.HTML(\"Specify a File (<a href=https://github.com/WishartLab/heatmapper2/wiki/Format target='_blank' rel='noopener noreferrer'>Format</a>)\"),\n\t\t\tchoices=[\"Example\", \"Upload\"] + extras,\n\t\t\tselected=default,\n\t\t\tinline=True\n\t),\n\n\t\t# Only display an input dialog if the user is one Upload\n\t\tui.panel_conditional(\n\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\tui.input_file(id=\"File\", label=None, accept=types, multiple=multiple),\n\t\t),\n\t\tui.panel_conditional(\n\t\t\t\"input.SourceFile === 'Example'\",\n\t\t\tInlineify(ui.input_select, id=\"Example\", label=ui.input_action_link(id=\"ExampleInfo\", label=\"Example\"), choices=examples),\n\t\t),\n\t]\n\n\ndef TableOptions(config):\n\t\"\"\"\n\t@brief Return the options for Table Manipulation.\n\t@returns A conditional panel that provides a DataType, and a ResetButton.\n\t\"\"\"\n\treturn  ui.panel_conditional(\n\t\t\"input.MainTab === 'TableTab'\",\n\t\tconfig.Type.UI(ui.input_radio_buttons, make_inline=False, id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"], inline=True),\n\t\tui.input_action_button(id=\"Reset\", label=\"Reset Values\"),\n\t\tui.download_button(id=\"DownloadTable\", label=\"Download Table\"),\n\t),\n\n\ndef MainTab(*args, m_type=ui.output_plot):\n\treturn ui.navset_tab(\n\t\tui.nav_panel(\"Heatmap\",\n\t\t\tui.panel_conditional(\"input.UpdateToggle\", m_type(id=\"Heatmap\")),\n\t\t\tui.panel_conditional(\"!input.UpdateToggle\", m_type(id=\"HeatmapReactive\")),\n\t\t\tvalue=\"HeatmapTab\"\n\t\t),\n\t\tui.nav_panel(\"Table\", ui.output_data_frame(id=\"Table\"), value=\"TableTab\"),\n\t\t*args,\n\t\tid=\"MainTab\"\n\t)\n\n\ndef Inlineify(ui_element, widths=[4,8], gap=\"20px\", **kwargs):\n\tlabel = kwargs[\"label\"]\n\tkwargs[\"label\"] = None\n\treturn ui.layout_columns(\n\t\tlabel,\n\t\tui_element(**kwargs),\n\t\tcol_widths=widths,\n\t\tgap=gap,\n\t)\n\nclass Config:\n\t\"\"\"\n\t@brief A configuration entry.\n\t\"\"\"\n\n\tdef __init__(self, visible=True, **kwargs):\n\t\t\"\"\"\n\t\t@brief Create a configuration entry.\n\t\t@param default: The default value for an input.\n\t\t@param visible: Whether the input should be shown in the sidebar\n\t\t@param **kwargs: Arguments to be passed to the input.\n\t\t\"\"\"\n\t\tself.visible = visible\n\t\tself.kwargs = kwargs\n\t\tif \"selected\" in kwargs:\n\t\t\tself.default = kwargs[\"selected\"]\n\t\telif \"value\" in kwargs:\n\t\t\tself.default = kwargs[\"value\"]\n\t\telse:\n\t\t\tself.default = None\n\t\tself.resolve = None\n\n\tdef __call__(self):\n\t\ttry:\n\t\t\tresolved = self.resolve()\n\t\t\treturn self.default if resolved is None else resolved\n\t\texcept Exception:\n\t\t\treturn self.default\n\n\n\tdef Resolve(self, input):\n\t\tself.resolve = input\n\n\n\tdef UI(self, ui_element, make_inline=True, widths=[4,8], gap=\"20px\", *args, **kwargs):\n\t\t\"\"\"\n\t\t@brief Displays the configured UI.\n\t\t@param ui The Shiny interface element to use.\n\t\t@parram **kwargs: Additional arguments to be passed to the input.\n\t\t@note\tkeyword arguments passed to the Config object during initialization will overrule\n\t\t\t\t\targuments passed to this function. Duplicates are allowed.\n\t\t\"\"\"\n\n\t\tcombined = self.kwargs\n\n\t\tfor key in kwargs.keys():\n\t\t\tcombined[key] = kwargs[key]\n\n\t\tif \"selected\" in combined: combined[\"selected\"] = self()\n\t\telif \"value\" in combined: combined[\"value\"] = self()\n\n\t\tif self.visible:\n\t\t\tif make_inline and \"label\" in combined:\n\t\t\t\treturn Inlineify(ui_element, widths, gap, **combined)\n\t\t\telse: return ui_element(*args, **combined)\n\n\nclass ConfigHandler(dict):\n\t\"\"\"\n\t@brief: A dictionary that can be accessed with dots, and can automatically resolve.\n\t\"\"\"\n\n\t__getattr__ = dict.get\n\t__setattr__ = dict.__setitem__\n\t__delattr__ = dict.__delitem__\n\n\n\tdef Resolve(self, input):\n\t\t\"\"\"\n\t\t@brief Resolves all stored objects.\n\t\t@param input The input to use for resolving.\n\t\t\"\"\"\n\t\tfor conf, var in self.items():\n\t\t\tvar.Resolve(input[conf])\n\n\ndef InitializeConfig(config, input):\n\t\"\"\"\n\t@brief Initializes the configuration variable.\n\t@param config: The configuration variable\n\t@param input: The Shiny input\n\n\tThis function will update each configuration's resolve member, so that\n\tif\n\t\"\"\"\n\tfor conf, var in config.items(): var.Resolve(input[conf])\n\n\ndef Error(message): return ui.notification_show(ui=message, type=\"error\", duration=3)\n\ndef Msg(message): return ui.notification_show(ui=message, type=\"default\", duration=3)\n\n\ndef Update(): return ui.input_action_button(\n\t\tid=\"Update\",\n\t\tlabel=ui.layout_columns(\n\t\t\tui.panel_conditional(\"input.UpdateToggle\", \"Auto\"),\n\t\t\t\"Update\",\n\t\t\tui.input_switch(id=\"UpdateToggle\", label=None, value=True),\n\t\t\tcol_widths=[1,9,1],\n\t\t\tgap=\"1px\",\n\t\t\theight=\"1px\", \t# Make it as small as possible\n\t\t)\n\t)\n", "type": "text"}]