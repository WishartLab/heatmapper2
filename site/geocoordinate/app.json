[{"name": "app.py", "content": "#\n# Heatmapper\n# Geocoordinate\n#\n# This file contains the ShinyLive application for Geocoordinate Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\n\nfrom shiny import App, reactive, render, ui\nfrom folium import Map as FoliumMap\nfrom folium.plugins import HeatMap, HeatMapWithTime\nfrom folium.raster_layers import ImageOverlay\nfrom tempfile import NamedTemporaryFile\nfrom matplotlib.pyplot import subplots\nfrom scipy.stats import gaussian_kde\nfrom numpy import vstack\n\nfrom shared import Cache, NavBar, MainTab, FileSelection, Filter, ColumnType, TableOptions, UpdateColumn, InitializeConfig, GenerateConditionalElements, Error\n\ntry:\n\tfrom user import config\nexcept ImportError:\n\tfrom config import config\n\n# Fine, Shiny\nimport branca, certifi, xyzservices, requests\n\n\ndef server(input, output, session):\n\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset shows deaths from a cholera outbreak in 1854. John Snow used this data in conjunction with local pump locations as evidence that cholera is spread by contaminated water. A digitised version of the data is available online, courtesy of Robin Wilson (robin@rtwilson.com).\",\n\t\t\"example2.txt\": \"This example data set shows bike thefts in Vancouver in 2011. The data was obtained from a 2013 Vancouver Sun blog post by Chad Skelton.\",\n\t\t\"example3.txt\": \"This example data set shows the location of traffic signals in Toronto. The data was obtained from Toronto Open Data. The idea to use this data set comes from this R-bloggers post by Myles Harrison.\",\n\t\t\"example1.csv\": \"Random data\",\n\t\t\"example21.csv\": \"A parsed version of the Northeast and North Central Pacific hurricane database (HURDAT2) 2000-2022, available at https://www.nhc.noaa.gov/data/\",\n\t\t\"example3.csv\": \"Recorded mean temperature (F) in the USA in 2023 as measured by the EPA, available at https://aqs.epa.gov/aqsweb/airdata/FileFormats.html#_daily_summary_files\",\n\n\t}\n\n\tDataCache = Cache(\"geocoordinate\")\n\tData = reactive.value(None)\n\tValid = reactive.value(False)\n\n\tInitializeConfig(config, input)\n\n\t@reactive.effect\n\t@reactive.event(input.SourceFile, input.File, input.Example, input.Reset)\n\tasync def UpdateData():\n\t\twith ui.Progress() as p:\n\t\t\tp.inc(message=\"Loading Data...\")\n\t\t\tData.set((await DataCache.Load(input)))\n\t\t\tValid.set(False)\n\n\n\tdef GetData(): return Table.data_view() if Valid() else Data()\n\n\n\tdef GenerateMap(df, map, v_col, lon_col, lat_col):\n\t\t\"\"\"\n\t\t@brief Generates a standard heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\topacity = config.Opacity()\n\t\tradius = config.Radius()\n\t\tblur = config.Blur()\n\n\t\tif \"Uniform\" in config.Features():\n\t\t\tdf[\"Value\"] = [1] * len(df[lat_col])\n\t\t\tv_col = \"Value\"\n\n\t\tif \"Scaled\" in config.Features():\n\t\t\tHeatMap(list(zip(df[lat_col], df[lon_col], df[v_col])),\n\t\t\tmin_opacity=opacity,\n\t\t\tradius=radius,\n\t\t\tblur=blur).add_to(map)\n\t\telse:\n\t\t\tlatitude = df[lat_col]\n\t\t\tlongitude = df[lon_col]\n\t\t\tvalues = df[v_col]\n\n\t\t\t# Threshold for density estimation\n\t\t\tthreshold = 0.1\n\t\t\tstack = vstack([longitude, latitude])\n\n\t\t\t# Calculate kernel density estimation\n\t\t\tkde = gaussian_kde(stack)\n\t\t\tdensity = kde(stack)\n\t\t\tvalues = values + density * threshold\n\n\t\t\t# Generate the contour\n\t\t\tfig, ax = subplots()\n\t\t\tcontour = ax.scatter(\n\t\t\t\tlongitude, \n\t\t\t\tlatitude, \n\t\t\t\tc=values * 100, \n\t\t\t\ts=[radius] * len(values), \n\t\t\t\tcmap=\"jet\", \n\t\t\t\talpha=opacity, \n\t\t\t\tlinewidths=0\n\t\t\t)\n\n\t\t\tax.axis('off')  # Turn off axes\n\t\t\tax.get_xaxis().set_visible(False)  # Hide x-axis\n\t\t\tax.get_yaxis().set_visible(False)  # Hide y-axis\n\n\t\t\t# Save the contour as an image, add to the map\n\t\t\ttemp = NamedTemporaryFile(suffix='.png')\n\t\t\tfig.savefig(temp, format='png', bbox_inches='tight', pad_inches=0, transparent=True, dpi=500)\n\t\t\timage_overlay = ImageOverlay(\n\t\t\t\timage=temp.name,\n\t\t\t\tbounds=[[min(latitude), min(longitude)], [max(latitude), max(longitude)]],\n\t\t\t\topacity=opacity,\n\t\t\t\tpixelated=False,\n\t\t\t)\n\t\t\timage_overlay.add_to(map)\n\t\tmap.fit_bounds(map.get_bounds())\n\n\n\tdef GenerateTemporalMap(df, map, t_col, v_col, lon_col, lat_col):\n\t\t\"\"\"\n\t\t@brief Generates a temporal heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\t# Ensure we have a valid time column\n\t\tif t_col not in df: return\n\n\t\t# Sort by time so we can work linearly.\n\t\tdf = df.sort_values(by=t_col)\n\n\t\t# Normalize\n\t\tif not \"Uniform\" in config.Features():\n\t\t\tvalues = df[v_col]\n\t\t\tdf[v_col] = (values - values.min()) / (values.max() - values.min())\n\n\t\t# Group data by time\n\t\tdata = []\n\t\tfor time, group_df in df.groupby(t_col):\n\t\t\ttime_slice = []\n\t\t\tfor _, row in group_df.iterrows():\n\t\t\t\tlat = row[lat_col]\n\t\t\t\tlon = row[lon_col]\n\t\t\t\tvalue = 1 if \"Uniform\" in config.Features() else row[v_col]\n\t\t\t\ttime_slice.append([lat, lon, value])\n\t\t\tdata.append(time_slice)\n\n\t\tradius = config.Radius() // 2\n\t\topacity = config.Opacity()\n\t\tblur = config.Blur() / 30\n\n\t\t# Make the heamap\n\t\tHeatMapWithTime(\n\t\t\tdata,\n\t\t\tindex=df[t_col].drop_duplicates().to_list(),\n\t\t\tradius=radius,\n\t\t\tmin_opacity=opacity,\n\t\t\tblur=blur,\n\t\t\tmax_speed=60).add_to(map)\n\n\n\t@output\n\t@render.data_frame\n\tdef Table(): Valid.set(True); return render.DataGrid(Data(), editable=True)\n\n\n\t@Table.set_patch_fn\n\tdef UpdateTable(*, patch: render.CellPatch) -> render.CellValue:\n\t\tif config.Type() == \"Integer\": value = int(patch[\"value\"])\n\t\telif config.Type() == \"Float\": value = float(patch[\"value\"])\n\t\telse: value = patch[\"value\"]\n\t\treturn value\n\n\n\t@output\n\t@render.ui\n\tdef Heatmap(): \n\t\twith ui.Progress() as p:\n\t\t\tp.inc(message=\"Loading input...\")\n\t\t\tdf = GetData()\n\t\t\tif df is None: return\n\n\t\t\t# Set the Value Column Accordingly (Helper functions handle None)\n\t\t\tp.inc(message=\"Formatting...\")\n\t\t\tif not \"Uniform\" in config.Features():\n\t\t\t\tv_col = config.ValueColumn()\n\t\t\t\tif v_col not in df: return\n\t\t\telse:\n\t\t\t\tv_col = None\n\n\t\t\t# Get lat and lon, generate the map\n\t\t\tlon_col = Filter(df.columns, ColumnType.Longitude, only_one=True)\n\t\t\tlat_col = Filter(df.columns, ColumnType.Latitude, only_one=True)\n\t\t\tif lat_col is None or lon_col is None: return\n\n\t\t\tmap = FoliumMap((df[lat_col][0], df[lon_col][0]), tiles=config.MapType())\n\n\t\t\tp.inc(message=\"Dropping Invalid Values...\")\n\t\t\tif config.ROI():\n\t\t\t\tto_drop = []\n\t\t\t\tl, u = config.Min(), config.Max()\n\t\t\t\tfor index, value in zip(df.index, df[v_col]):\n\t\t\t\t\tif value < l or value > u:\n\t\t\t\t\t\tif config.ROI_Mode() == \"Remove\": to_drop.append(index)\n\t\t\t\t\t\telif config.ROI_Mode() == \"Round\": df.at[index, v_col] = u if value > u else l\n\t\t\t\tdf = df.drop(to_drop)\n\t\t\t\tif len(df) == 0:\n\t\t\t\t\tError(\"No locations! Ensure Key Column and Key Properties are correct, and your ROI is properly set!\")\n\t\t\t\t\treturn\n\t\t\t\n\t\t\t# Generate the right heatmap.\n\t\t\tp.inc(message=\"Plotting...\")\n\t\t\tif \"Temporal\" in config.Features(): \n\t\t\t\tt_col = config.TimeColumn()\n\t\t\t\tGenerateTemporalMap(df, map, t_col, v_col, lon_col, lat_col)\n\t\t\telse: GenerateMap(df.copy(deep=True), map, v_col, lon_col, lat_col)\n\t\t\treturn map\n\n\n\t@output\n\t@render.text\n\t@reactive.event(input.SourceFile, input.Example)\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@render.download(filename=\"table.csv\")\n\tdef DownloadTable(): yield GetData().to_string()\n\n\n\t@render.download(filename=\"heatmap.html\")\n\tdef DownloadHeatmap(): m = LoadMap(); yield m.get_root().render()\n\n\n\t@reactive.Effect\n\tdef UpdateColumns():\n\t\tcolumns = GetData().columns\n\t\tif len(columns) == 0: return\n\t\tif not \"Uniform\" in config.Features(): \n\t\t\tcolumn = UpdateColumn(columns, ColumnType.Value, config.ValueColumn(), \"ValueColumn\")\n\t\t\tif column is None:\n\t\t\t\tError(\"Couldn't find a Value Column! You may need to select Uniform in the Features to visualize the HeatMap!\")\n\t\tif \"Temporal\" in config.Features(): \n\t\t\tcolumn = UpdateColumn(columns, ColumnType.Time, config.TimeColumn(), \"TimeColumn\")\n\t\t\tif column is None:\n\t\t\t\tError(\"Couldn't find a Temporal Column! You may need to deselect Temporal in the Features to visualize the HeatMap!\")\n\t\t\n\n\n\t@render.ui\n\tdef ConditionalElements(): return GenerateConditionalElements([\n\t\t\t(\n\t\t\t\t\"Temporal\" in config.Features(), \n\t\t\t\tconfig.TimeColumn.UI(ui.input_select, id=\"TimeColumn\", label=\"Time Column\", choices=[], multiple=False)\n\t\t\t),\n\t\t\t(\n\t\t\t\tnot \"Uniform\" in config.Features(), \n\t\t\t\tconfig.ValueColumn.UI(ui.input_select, id=\"ValueColumn\", label=\"Value Column\", choices=[], multiple=False)\n\t\t\t)\n\t\t])\n\n\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(\n\t\t\t\texamples={\n\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\"example3.txt\": \"Example 3\",\n\t\t\t\t\t\"example1.csv\": \"Example 4\",\n\t\t\t\t\t\"example21.csv\": \"Example 5\",\n\t\t\t\t\t\"example3.csv\": \"Example 6\"\n\t\t\t\t},\n\t\t\t\ttypes=[\".csv\", \".txt\", \".dat\", \".tsv\", \".tab\", \".xlsx\", \".xls\", \".odf\"],\n\t\t\t\tproject=\"Geocoordinate\"\n\t\t\t),\n\n\t\t\tTableOptions(config),\n\n\t\t\t\tconfig.Features.UI(\n\t\t\t\t\tui.input_checkbox_group, id=\"Features\", label=\"Features\", \n\t\t\t\t\tchoices=[\"Temporal\", \"Uniform\", \"Scaled\"], \n\t\t\t\t\tinline=True\n\t\t\t\t),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.MainTab === 'HeatmapTab'\",\n\t\t\t\tui.output_ui(id=\"ConditionalElements\"),\n\n\t\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\t\tconfig.MapType.UI(ui.input_radio_buttons,id=\"MapType\", label=\"Map Type\", choices={\"CartoDB Positron\": \"CartoDB\", \"OpenStreetMap\": \"OSM\"}, inline=True),\n\n\t\t\t\tconfig.Opacity.UI(ui.input_slider, id=\"Opacity\", label=\"Heatmap Opacity\", min=0.0, max=1.0, step=0.1),\n\t\t\t\tconfig.Radius.UI(ui.input_slider, id=\"Radius\", label=\"Size of Points\", min=5, max=100, step=5),\n\t\t\t\tconfig.Blur.UI(ui.input_slider, id=\"Blur\", label=\"Blurring\", min=1, max=30, step=1),\n\t\t\t\t\n\t\t\t\tconfig.ROI.UI(ui.input_checkbox, id=\"ROI\", label=\"ROI (Lower/Upper)\"),\n\t\t\t\tconfig.ROI_Mode.UI(ui.input_radio_buttons, id=\"ROI_Mode\", label=None, choices=[\"Remove\", \"Round\"], inline=True),\n\t\t\t\t\tui.layout_columns(\n\t\t\t\t\t\tconfig.Min.UI(ui.input_numeric,id=\"Min\", label=None, min=0),\n\t\t\t\t\t\tconfig.Max.UI(ui.input_numeric, id=\"Max\", label=None, min=0),\n\t\t\t\t\t),\n\n\n\t\t\t\t# Add the download buttons.\n\t\t\t\tui.download_button(\"DownloadHeatmap\", \"Heatmap\")\n\t\t\t),\n\t\t),\n\n\t\tMainTab(m_type=ui.output_ui),\n\t)\n)\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "config.py", "content": "#\n# Heatmapper \n# Geocoordinate Configuration\n#\n# This file contains configuration for Geocoordinate. \n\n\nfrom shared import Config, ConfigHandler\n\nconfig = ConfigHandler({\n\n\t# See expression's config for explanation of dynamic inputs.\n\t\"TimeColumn\": Config(),\n\t\"ValueColumn\": Config(),\n\n\t# \"CartoDB Positron\", \"OpenStreetMap\"\n\t\"MapType\": Config(selected=\"CartoDB Positron\"),\n\n\t# Any floating value between 0.0 and 1.0\n\t\"Opacity\": Config(value=0.7),\n\n\t# Any numerical value from 5-100\n\t\"Radius\": Config(value=25),\n\n\t# Any numerical value from 1-30\n\t\"Blur\": Config(value=15),\n\n\t# Allow toggling Range of Interest\n\t\"ROI\": Config(value=False),\n\n\t# \"Remove\" or \"Round\"\n\t\"ROI_Mode\": Config(selected=\"Remove\"),\n\n\t# Any number; the minimum/maximum bound for ROI\n\t\"Min\": Config(value=0),\n\t\"Max\": Config(value=0),\n\n\t# \"Temporal\", \"Uniform\", \"Scaled\"\n\t\"Features\": Config(selected=[\"Scaled\"]),\n\n\t# \"Integer\" \"Float\" \"String\"\n\t\"Type\": Config(selected=\"Integer\"),\n\n\t# No value, just toggle visibility.\n\t\"DownloadTable\": Config(),\n})", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import ui, reactive\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom tempfile import NamedTemporaryFile\nfrom sys import modules\nfrom pathlib import Path\nfrom enum import Enum\nfrom os.path import exists\nfrom copy import deepcopy\n\n# Used for fetching web resources in a variety of fashions.\nURL = \"https://wishartlab.github.io/heatmapper2\"\nRaw = \"https://raw.githubusercontent.com/WishartLab/heatmapper2/main\"\n\n# Define the Server and Port of the Shiny instances (Port is incremented)\n# Change these if Heatmapper is running on a server.\nServer = \"http://35.208.86.138\"\nPort = 8000\n\n# Detect the running environment\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\nelse:\n\tPyodide = False\n\n# Shared Values\nColors = [\"Blue\", \"Orange\", \"Green\", \"Red\", \"Purple\", \"Brown\", \"Pink\", \"Gray\", \"Olive\", \"Cyan\", \"White\", \"Yellow\"]\nDistanceMethods = [\"Braycurtis\", \"Canberra\", \"Chebyshev\", \"Cityblock\", \"Correlation\", \"Cosine\", \"Dice\", \"Euclidean\", \"Hamming\", \"Jaccard\", \"Jensenshannon\", \"Kulczynski1\", \"Matching\", \"Minkowski\", \"Rogerstanimoto\", \"Russellrao\", \"Seuclidean\", \"Sokalmichener\", \"Sokalsneath\", \"Sqeuclidean\", \"Yule\"]\nInterpolationMethods = [\"None\", \"Antialiased\", \"Nearest\", \"Bilinear\", \"Bicubic\", \"Spline16\", \"Spline36\", \"Hanning\", \"Hamming\", \"Hermite\", \"Kaiser\", \"Quadric\", \"Catrom\", \"Gaussian\", \"Bessel\", \"Mitchell\", \"Sinc\", \"Lanczos\", \"Blackman\"]\nClusteringMethods = [\"Single\", \"Complete\", \"Average\", \"Weighted\", \"Centroid\", \"Median\", \"Ward\"]\nColorMaps = [\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\"]\n\nclass ColumnType(Enum): Time = 0; Name = 1; Value = 2; Longitude = 3; Latitude = 4; X = 5; Y = 6; Z = 7; Cluster = 8; Free = 9; Spatial = 10; NameGeoJSON = 11;\nColumns = {\n\tColumnType.Time: {\"time\", \"date\", \"year\"},\n\tColumnType.Name: {\"name\", \"orf\", \"uniqid\", \"face\", \"triangle\", \"iso_code\", \"continent\", \"country\", \"location\"},\n\tColumnType.Value: {\"value\", \"weight\", \"intensity\", \"in_tissue\"},\n\tColumnType.Longitude: {\"longitude\", \"long\"},\n\tColumnType.Latitude: {\"latitude\", \"lat\"},\n\tColumnType.X: {\"x\"},\n\tColumnType.Y: {\"y\"},\n\tColumnType.Z: {\"z\"},\n\tColumnType.Cluster: {\"cell type\", \"celltype_mapped_refined\", \"cluster\", \"cell_class\", \"cell_subclass\", \"cell_cluster\"},\n\tColumnType.Free: {None},\n\tColumnType.Spatial: {\"spatial\"},\n\tColumnType.NameGeoJSON: {\"name\", \"admin\", \"iso_a3\", \"iso_a2\", \"iso\"}\n}\n\n\ndef Filter(columns, ctype: ColumnType, good: list = [], bad: list = [], only_one=False, reject_unknown=False):\n\t\"\"\"\n\t@brief Filters available column names based on what input we want\n\t@param columns: The columns of the DataFrame (Usually just df.columns)\n\t@param ctype: The type of column we're looking for (Look at the ColumnType Enum)\n\t@param good: A list of column names on top of those defined by the type to be included\n\t@param bad: A list of column names on top of those defined by the type to be excluded from the result.\n\t@param only_one: Only return a single result, so the variable can be used immediately.\n\t@param reject_unknown: Only include columns explicitly defined\n\t@return: A list of column names to use.\n\t\"\"\"\n\n\t# Fold cases\n\tfolded = [column.lower() for column in columns]\n\n\t# Add and remove what user asked for, filtering None\n\toptions = set(folded)\n\tif bad: options -= set([b.lower() for b in bad if b])\n\tif good: options &= set([g.lower() for g in good if g])\n\n\t# Take an intersection of our columns and the type we want. If there is a match, return those\n\t# Otherwise, remove all columns we know it shouldn't be, and return that instead.\n\tintersection = options & Columns[ctype]\n\tif intersection or reject_unknown: options = intersection\n\telse:\n\t\tfor key, value in Columns.items():\n\t\t\tif key != ctype: options -= value\n\n\t# Get the valid indices, and sort them in ascending order\n\tindices = [folded.index(value) for value in options]\n\tindices.sort()\n\n\t# Get the original column names, without case-folding, and return as a list.\n\treassembled = [columns[index] for index in indices]\n\tif not reassembled: return None\n\treturn reassembled[0] if only_one else reassembled\n\n\ndef UpdateColumn(columns, ctype, default, id, **kwargs):\n\t\"\"\"\n\t@brief Update a input_select element based on columns\n\t@pararm columns: The list of columns to source\n\t@param ctype: The ColumnType to search for\n\t@param default: The default value to use\n\t@param id: The ID of the UI element\n\t@param kwargs: Keyword arguments to be passed to filter. \n\t@returns The new value of the element..\n\t\"\"\"\n\n\tfiltered = Filter(columns, ctype, **kwargs)\n\tif filtered is None: return\n\tselected = default if default in columns else filtered[0]\n\tui.update_select(id=id, choices=filtered, selected=selected)\n\treturn selected\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef HandleDataFrame(path, function):\n\t\t\"\"\"\n\t\t@brief Handle DataFrame's\n\t\t@param i: The binary of the file\n\t\t@param function: The pandas function to use to read the file.\n\t\t@returns A DataFrame\n\t\t\"\"\"\n\n\t\t# Read the table once.\n\t\tdf = function(path.resolve()).fillna(0)\n\n\t\t# If the first column value is a float, we assume it's data, and not column names.\n\t\t# Re-read the DataFrame with generic column names instead\n\t\ttry:\n\t\t\tfloat(df.columns[0])\n\t\t\tdf = function(path.resolve(), header=None, names=[f\"Column {i}\" for i in range(df.shape[1])])\n\t\texcept ValueError: pass\n\t\treturn df\n\n\n\t@staticmethod\n\tdef DefaultHandler(path):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle csv, xlsx, and defaults all other files to read_table\n\t\t@param n: The path to the file\n\t\t@returns: An object, if the provided file is supported, None otherwise.\n\t\t\"\"\"\n\n\t\tsuffix = path.suffix\n\t\tif suffix == \".csv\": return Cache.HandleDataFrame(path, read_csv)\n\t\telif suffix == \".xlsx\" or suffix == \".xls\" or suffix == \".odf\": return Cache.HandleDataFrame(path, read_excel)\n\t\telse: return Cache.HandleDataFrame(path, read_table)\n\n\n\tasync def _remote(self, url):\n\t\t\tr = await pyfetch(url);\n\t\t\tif not r.ok: return None\n\t\t\treturn await r.bytes()\n\n\n\tasync def _local(self, url):\n\t\tif not exists(url): return None\n\t\treturn Path(url)\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary is the unprocessed, fetched web resources\n\t\tself._primary = {}\n\n\t\t# The objects are anything that applications want to store\n\t\tself._objects = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself._download = lambda url: self._remote(url)\n\t\t\tself._source = f\"{Raw}/{project}/example_input/\"\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself._download = lambda url: self._local(url)\n\t\t\tself._source = \"../example_input/\"\n\n\n\tasync def Load(self, input, source_file=None, example_file=None, source=None, input_switch=None, default=DataFrame()):\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@param source_file: The input ID that should be used to fetch the file (Defaults to input.File() if None)\n\t\t@param example_file: The input ID that should be used to fetch th example (Defaults to input.Example() if None)\n\t\t@param input_switch:\tThe input ID to check for Upload/Example/Other. The value is compared against \"Upload\" for user\n\t\t\t\t\t\t\t\t\t\t\t\t\tuploaded items, and defaults to fetching example_file otherwise. (Defaults to input.SourceFile())\n\t\t@param default:\tThe object that should be returned if files cannot be fetched. Ensures that Load will always return an\n\t\t\t\t\t\t\t\t\t\tobject, avoiding the needing to check output. Defaults to a DataFrame. The object should be able to\n\t\t\t\t\t\t\t\t\t\tinitialize without arguments.\n\t\t\"\"\"\n\n\t\tif source_file is None: source_file = input.File()\n\t\tif example_file is None: example_file = input.Example()\n\t\tif source is None: source = self._source\n\t\tif input_switch is None: input_switch = input.SourceFile()\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input_switch == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = source_file\n\t\t\tif file is None: return default\n\n\t\t\t# The datapath can be immediately used to load examples, but we explicitly need to use\n\t\t\t# Local as a user uploaded file will always be fetched on disk.\n\t\t\tn = str(file[0][\"datapath\"])\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(Path(n))\n\n\t\t# Example files, conversely, can be on disk or on a server depending on whether we're in a WASM environment.\n\t\telse:\n\n\t\t\t# If we explicitly provide a URL, use it, but only in Pyodide (We still assume the file exists on disk when running \n\t\t\t# in server-mode).\n\t\t\tif example_file.startswith(\"https://\"):\n\t\t\t\tn = example_file if Pyodide else str(source + example_file.split(\"/\")[-1])\n\t\t\telse:\n\t\t\t\tn = str(source + example_file)\n\t\t\traw = await self._download(n)\n\n\t\t\t# WASM needs a temporary file, but they are deleted out of their scope.\n\t\t\tif Pyodide:\n\t\t\t\ttemp = NamedTemporaryFile(suffix=Path(n).suffix); \n\t\t\t\ttemp.write(BytesIO(raw).read()); temp.seek(0)\n\t\t\t\tif n not in self._primary: self._primary[n] = self._handler(Path(temp.name))\n\n\t\t\telif n not in self._primary: self._primary[n] = self._handler(raw)\n\n\t\t# If the object cannot be copied, then we can just return it directly\n\t\ttry:\n\t\t\treturn deepcopy(self._primary[n])\n\t\texcept AttributeError:\n\t\t\treturn self._primary[n]\n\n\n\tdef Store(self, object, inputs):\n\t\t\"\"\"\n\t\t@brief Store arbitrary data in the Cache.\n\t\t@param object: The object to store\n\t\t@param inputs: A list of values that compose a hash of the object.\n\t\t\"\"\"\n\t\th = \"\".join(str(i) for i in inputs)\n\t\tself._objects[h] = object\n\n\n\tdef Get(self, inputs):\n\t\t\"\"\"\n\t\t@brief Retrieve arbitrary data in the Cache.\n\t\t@param inputs: A list of values that compose a hash of the object.\n\t\t\"\"\"\n\t\th = \"\".join(str(i) for i in inputs)\n\t\tif h in self._objects:\n\t\t\t\treturn self._objects[h]\n\t\telse: return None\n\n\tdef In(self, inputs):\n\t\th = \"\".join(str(i) for i in inputs)\n\t\treturn h in self._objects\n\n\ndef NavBar():\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\tSources = {\n\t\t\"expression\": f\"{URL}/site/expression/index.html\" if Pyodide else f\"{Server}:{Port}\",\n\t\t\"pairwise\": f\"{URL}/site/pairwise/index.html\" if Pyodide else f\"{Server}:{Port + 1}\",\n\t\t\"image\": f\"{URL}/site/image/index.html\" if Pyodide else f\"{Server}:{Port + 2}\",\n\t\t\"geomap\": f\"{URL}/site/geomap/index.html\" if Pyodide else f\"{Server}:{Port + 3}\",\n\t\t\"geocoordinate\": f\"{URL}/site/geocoordinate/index.html\" if Pyodide else f\"{Server}:{Port + 4}\",\n\t\t\"3d\": f\"{Server}:{Port + 5}\",\n\t\t\"spatial\": f\"{Server}:{Port + 6}\",\n\t}\n\n\treturn (\n\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\t\tui.navset_bar(\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"expression\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"pairwise\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"image\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Image</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"geomap\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"geocoordinate\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"3d\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">3D</a>')),\n\t\t\tui.nav_control(ui.HTML(f'<a href=\"{Sources[\"spatial\"]}\" target=\"_blank\" rel=\"noopener noreferrer\">Spatial</a>')),\n\t\t\tui.nav_control(ui.HTML('<a href=https://github.com/WishartLab/heatmapper2/wiki target=\"_blank\" rel=\"noopener noreferrer\">About</a>')),\n\t\t\tui.nav_spacer(),\n\t\t\tui.nav_control(ui.input_dark_mode(id=\"mode\")),\n\t\t\ttitle=ui.HTML(\n\t\t\t\tf'<a href=\"{URL}\" target=\"_blank\" rel=\"noopener noreferrer\"> \\\n\t\t\t\t\t<img src=\"{Raw}/site/logo.png\" alt=\"Heatmapper\"> \\\n\t\t\t\t</a>'),\n\t\t),\n\t)\n\n\ndef FileSelection(examples, types, upload_label=\"Choose a File\", multiple=False, default=\"Upload\", project=\"Overview\"):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@param upload_label: The label for the upload input. Useful to define specifically what kind of files are needed\n\t@param multiple: Whether to accept multiple files. \n\t@param default: Whether to start on the example, or upload dialog\n\t@param project: The name of a project, to specify a specified header within the Interface documentation\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t@info multiple=True is not handled properly by the Cache. You will need to create a function that properly handles\n\t\teach file (See spatial for an implementation)\n\t@info If you're examples are large files, or require significant computation, you may want to switch it to Upload instead.\n\t\"\"\"\n\n\t# If the user needs help with the formatting.\n\treturn [\n\tui.layout_columns(\n\t\tui.HTML(\"<a href=https://github.com/WishartLab/heatmapper2/wiki/Format target='_blank' rel='noopener noreferrer'>Format</a>\"),\n\t\tui.HTML(f\"<a href='https://github.com/WishartLab/heatmapper2/wiki/Interface#{project}' target='_blank' rel='noopener noreferrer'>Help</a>\"),\n\t\tcol_widths=[6,6]\n\t),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=default, inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", upload_label, accept=types, multiple=multiple),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[7,3],\n\t\t)\n\t),\n\t]\n\n\ndef TableOptions(config):\n\t\"\"\"\n\t@brief Return the options for Table Manipulation.\n\t@returns A conditional panel that provides a DataType, and a ResetButton.\n\t\"\"\"\n\treturn  ui.panel_conditional(\n\t\t\"input.MainTab === 'TableTab'\",\n\t\tconfig.Type.UI(ui.input_radio_buttons, id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"], inline=True),\n\t\tui.input_action_button(id=\"Reset\", label=\"Reset Values\"),\n\t\tui.download_button(id=\"DownloadTable\", label=\"Download Table\"),\n\t),\n\n\ndef MainTab(*args, m_type=ui.output_plot):\n\treturn ui.navset_tab(\n\t\tui.nav_panel(\"Heatmap\",\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.UpdateToggle\",\n\t\t\t\tm_type(id=\"HeatmapReactive\"),\n\t\t\t), \n\t\t\tui.panel_conditional(\n\t\t\t\t\"!input.UpdateToggle\",\n\t\t\t\tm_type(id=\"Heatmap\"),\n\t\t\t), \n\t\t\tvalue=\"HeatmapTab\"\n\t\t),\n\t\tui.nav_panel(\"Table\", ui.output_data_frame(id=\"Table\"), value=\"TableTab\"),\n\t\t*args,\n\t\tid=\"MainTab\"\n\t)\n\n\nclass Config:\n\t\"\"\"\n\t@brief A configuration entry.\n\t\"\"\"\n\n\tdef __init__(self, visible=True, **kwargs):\n\t\t\"\"\"\n\t\t@brief Create a configuration entry.\n\t\t@param default: The default value for an input.\n\t\t@param visible: Whether the input should be shown in the sidebar\n\t\t@param **kwargs: Arguments to be passed to the input.\n\t\t\"\"\"\n\t\tself.visible = visible\n\t\tself.kwargs = kwargs\n\t\tif \"selected\" in kwargs:\n\t\t\tself.default = kwargs[\"selected\"]\n\t\telif \"value\" in kwargs:\n\t\t\tself.default = kwargs[\"value\"]\n\t\telse:\n\t\t\tself.default = None\n\t\tself.resolve = None\n\n\n\tdef __call__(self): \n\t\ttry:\n\t\t\tresolved = self.resolve()\n\t\t\treturn self.default if resolved is None else resolved\n\t\texcept Exception:\n\t\t\treturn self.default\n\n\n\tdef Resolve(self, input): \n\t\tself.resolve = input\n\n\n\tdef UI(self, ui, *args, **kwargs):\n\t\t\"\"\"\n\t\t@brief Displays the configured UI.\n\t\t@param ui The Shiny interface element to use.\n\t\t@parram **kwargs: Additional arguments to be passed to the input.\n\t\t@note\tkeyword arguments passed to the Config object during initialization will overrule\n\t\t\t\t\targuments passed to this function. Duplicates are allowed.\n\t\t\"\"\"\n\n\t\t# Remove duplicates.\n\t\tduplicates = []\n\t\tfor key in kwargs.keys():\n\t\t\tif key in self.kwargs: duplicates.append(key)\n\t\tfor key in duplicates: del kwargs[key]\n\n\t\t# Return the correct UI.\n\t\tif self.visible: return ui(*args, **kwargs, **self.kwargs)\n\n\nclass ConfigHandler(dict):\n\t\"\"\"\n\t@brief: A dictionary that can be accessed with dots, and can automatically resolve.\n\t\"\"\"\n\n\t__getattr__ = dict.get\n\t__setattr__ = dict.__setitem__\n\t__delattr__ = dict.__delitem__\n\n\n\tdef Resolve(self, input): \n\t\t\"\"\"\n\t\t@brief Resolves all stored objects.\n\t\t@param input The input to use for resolving.\n\t\t\"\"\"\n\t\tfor conf, var in self.items():\n\t\t\tvar.Resolve(input[conf])\n\n\ndef InitializeConfig(config, input): \n\t\"\"\"\n\t@brief Initializes the configuration variable.\n\t@param config: The configuration variable\n\t@param input: The Shiny input\n\n\tThis function will update each configuration's resolve member, so that\n\tif \n\t\"\"\"\n\tfor conf, var in config.items(): var.Resolve(input[conf])\n\n\ndef GenerateConditionalElements(pairs):\n\telements = []\n\tfor conditional, element in pairs:\n\t\tif conditional: elements.append(element)\n\treturn elements\n\n\ndef Error(message):\n\treturn ui.notification_show(ui=message, type=\"error\", duration=3)\n\n\ndef Update():\n\t\treturn [\n\t\t\tui.input_switch(id=\"UpdateToggle\", label=\"Manual Updating\"),\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.UpdateToggle\",\n\t\t\t\tui.input_action_button(id=\"Update\", label=\"Update\")\n\t\t\t),\n\t\t]", "type": "text"}]