[{"name": "app.py", "content": "#\n# Heatmapper\n# 3D\n#\n# This file contains the ShinyLive application for 3D Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nimport numpy as np\nfrom matplotlib.pyplot import subplots\nimport matplotlib.pyplot as plt\nfrom matplotlib.collections import PolyCollection\nfrom pandas import DataFrame\nfrom pywavefront import Wavefront\nfrom io import BytesIO, StringIO\nfrom shared import Cache, MainTab, NavBar, FileSelection, Filter, ColumnType, FillColumnSelection, TableValueUpdate\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\t# Information regarding example files.\n\tInfo = {\n\t\t\"example1.csv\": {\n\t\t\t\"Object\": \"bunny.obj\",\n\t\t\t\"Description\": \"A bunny, mapped with random data\"\n\t\t}\n\t}\n\n\tDataCache = Cache(\"3d\")\n\n\n\tdef Frustum(left, right, bottom, top, znear, zfar):\n\t\t\"\"\"\n\t\t@brief Returns a viewing volume giving clipping planes\n\t\t@param left: left clipping plane\n\t\t@param right: right clipping plane\n\t\t@param bottom: bottom clipping plane\n\t\t@param top: top clipping plane\n\t\t@param znear: near clipping plame\n\t\t@param zfar: far clipping plane\n\t\t@returns The viewing volume\n\t\t@info https://matplotlib.org/matplotblog/posts/custom-3d-engine/\n\t\t\"\"\"\n\t\tM = np.zeros((4, 4), dtype=np.float32)\n\t\tM[0, 0] = +2.0 * znear / (right - left)\n\t\tM[1, 1] = +2.0 * znear / (top - bottom)\n\t\tM[2, 2] = -(zfar + znear) / (zfar - znear)\n\t\tM[0, 2] = (right + left) / (right - left)\n\t\tM[2, 1] = (top + bottom) / (top - bottom)\n\t\tM[2, 3] = -2.0 * znear * zfar / (zfar - znear)\n\t\tM[3, 2] = -1.0\n\t\treturn M\n\n\n\tdef Perspective(fovy, aspect, znear, zfar):\n\t\t\"\"\"\n\t\t@brief Return a perspective projection\n\t\t@param fovy: field of View\n\t\t@param aspect: aspect\n\t\t@param znear: near clipping plane\n\t\t@param zfar: far clipping plane\n\t\t@return The viewing volume\n\t\t@info https://matplotlib.org/matplotblog/posts/custom-3d-engine/\n\t\t\"\"\"\n\t\th = np.tan(0.5*np.radians(fovy)) * znear\n\t\tw = h * aspect\n\t\treturn Frustum(-w, w, -h, h, znear, zfar)\n\n\n\tdef Translate(x, y, z):\n\t\t\"\"\"\n\t\t@brief Apply a translation to move the model around\"\n\t\t@param x: The x translation\n\t\t@param y: The y translation\n\t\t@param z: The z translation\n\t\t@return The translated numpy array.\n\t\t@info https://matplotlib.org/matplotblog/posts/custom-3d-engine/\n\t\t\"\"\"\n\t\treturn np.array([[1, 0, 0, x],\n\t\t\t\t\t\t\t\t\t\t\t[0, 1, 0, y],\n\t\t\t\t\t\t\t\t\t\t\t[0, 0, 1, z],\n\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 1]], dtype=float)\n\n\n\tdef Y(theta):\n\t\t\"\"\"\n\t\t@param Rotate about the Y axis\n\t\t@param theta: The angle to rotate\n\t\t@info https://matplotlib.org/matplotblog/posts/custom-3d-engine/\n\t\t\"\"\"\n\t\tt = np.pi * theta / 180\n\t\tc, s = np.cos(t), np.sin(t)\n\t\treturn np.array([[1, 0,  0, 0],\n\t\t\t\t\t\t\t\t\t\t\t[0, c, -s, 0],\n\t\t\t\t\t\t\t\t\t\t\t[0, s,  c, 0],\n\t\t\t\t\t\t\t\t\t\t\t[0, 0,  0, 1]], dtype=float)\n\n\n\tdef X(theta):\n\t\t\"\"\"\n\t\t@param Rotate about the X axis\n\t\t@param theta: The angle to rotate\n\t\t@info https://matplotlib.org/matplotblog/posts/custom-3d-engine/\n\t\t\"\"\"\n\t\tt = np.pi * theta / 180\n\t\tc, s = np.cos(t), np.sin(t)\n\t\treturn  np.array([[ c, 0, s, 0],\n\t\t\t\t\t\t\t\t\t\t\t[ 0, 1, 0, 0],\n\t\t\t\t\t\t\t\t\t\t\t[-s, 0, c, 0],\n\t\t\t\t\t\t\t\t\t\t\t[ 0, 0, 0, 1]], dtype=float)\n\n\n\tasync def LoadObject():\n\t\t\"\"\"\n\t\t@brief Loads the image to render behind the heatmap.\n\t\t@returns an Image object, if an image is specified, otherwise None.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.Object()\n\t\t\treturn None if file is None else Wavefront(file[0][\"datapath\"], create_materials=True, collect_faces=True)\n\t\telse:\n\t\t\tn = Info[input.Example()][\"Object\"]\n\t\t\tcache = DataCache.Cache()\n\t\t\tif n not in cache:\n\t\t\t\t# Unfortunate, but we need to write to a temporary file.\n\t\t\t\topen(\"temp.obj\", \"wb\").write(await DataCache.Download(DataCache.Source + n))\n\t\t\t\tcache[n] = Wavefront(\"temp.obj\", create_materials=True, collect_faces=True)\n\t\t\treturn cache[n]\n\n\n\tasync def GenerateHeatmap():\n\t\tmodel = await LoadObject()\n\t\tdf = await DataCache.Load(input)\n\n\t\t# If there is a name column, make sure the triangles are in order.\n\t\tname_col = Filter(df.columns, ColumnType.Name, only_one=True)\n\t\tif name_col is not None: df.sort_values(name_col)\n\n\t\t# Get the faces and vertices\n\t\tV, F = np.array(model.vertices), np.array(model.mesh_list[0].faces)\n\n\t\t# Magic math I don't understand ;)\n\t\tV = (V-(V.max(0)+V.min(0))/2) / max(V.max(0)-V.min(0))\n\t\tmodel = Y(input.Y()) @ X(input.X())\n\t\tview = Translate(0,0,-3.5)\n\t\tproj = Perspective(input.Zoom(), 1, 1, 100)\n\t\tMVP = proj @ view @ model\n\t\tV = np.c_[V, np.ones(len(V))]  @ MVP.T\n\t\tV /= V[:,3].reshape(-1,1)\n\t\tV = V[F]\n\t\tT =  V[:,:,:2]\n\t\tZ = -V[:,:,2].mean(axis=1)\n\n\t\t# If no data, just render a value for each triangle\n\t\tif df.empty: C = plt.get_cmap(input.ColorMap().lower())([0.5 for _ in range(len(V))])\n\t\telse:\n\t\t\t# Normalize the data, make a colormap\n\t\t\tdata = df[Filter(df.columns, ColumnType.Value, only_one=True)]\n\t\t\tm, M = data.min(), data.max()\n\t\t\tdata = (data-m)/(M-m)\n\t\t\tC = plt.get_cmap(input.ColorMap().lower())(data)\n\n\t\t# Render back to front\n\t\tI = np.argsort(Z)\n\t\tT, C = T[I,:], C[I,:]\n\n\t\t# Rendering\n\t\tfig, ax = plt.subplots(figsize=(6,6))\n\t\tax.set_xlim([-1,+1])\n\t\tax.set_ylim([-1,+1])\n\t\tax.axis('off')\n\t\tax.set_aspect('equal')\n\t\tcollection = PolyCollection(T, closed=True, linewidth=0.1, facecolor=C, edgecolor=\"black\")\n\t\tax.add_collection(collection)\n\t\treturn ax\n\n\t@output\n\t@render.data_frame\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, ignore_none=False, ignore_init=False)\n\tasync def LoadedTable(): return await DataCache.Load(input)\n\n\n\t@output\n\t@render.plot\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, input.ColorMap, input.X, input.Y, input.Zoom, input.Object, ignore_none=False, ignore_init=False)\n\tasync def Heatmap(): return await GenerateHeatmap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()][\"Description\"]\n\n\t@render.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await DataCache.Load(input); yield df.to_string()\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Update)\n\tasync def Update(): await DataCache.Update(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Reset)\n\tasync def Reset(): await DataCache.Purge(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.TableRow, input.TableCol, input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateTableValue(): TableValueUpdate(await DataCache.Load(input), input)\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(\"3D\"),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(examples={\"example1.csv\": \"Example 1\"}, types=[\".csv\", \".txt\", \".xlsx\"]),\n\n\t\t\tui.panel_conditional(\"input.SourceFile === 'Upload'\", ui.input_file(\"Object\", \"Choose an Object File\", accept=[\".obj\"], multiple=False)),\n\n\t\t\t# Set the ColorMap used.\n\t\t\tui.input_select(id=\"ColorMap\", label=\"Color Map\", choices=[\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\", \"Cividis\"], selected=\"Viridis\"),\n\n\t\t\tui.input_slider(id=\"X\", label=\"X Rotation\", value=45, min=0, max=360, step=5),\n\t\t\tui.input_slider(id=\"Y\", label=\"Y Rotation\", value=20, min=0, max=360, step=5),\n\t\t\tui.input_slider(id=\"Zoom\", label=\"Zoom\", value=25, min=0, max=50, step=5),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.download_button(\"DownloadTable\", \"Download Table\"),\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tMainTab(),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "pywavefront\n", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom sys import modules\nfrom copy import deepcopy\nfrom pathlib import Path\nfrom enum import Enum\n\n\n# If pyodide is found, we're running WebAssembly.\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\n# Otherwise,\nelse:\n\tfrom os.path import exists\n\tPyodide = False\n\n\nclass ColumnType(Enum):\n\tTime = 0\n\tName = 1\n\tValue = 2\n\tLongitude = 3\n\tLatitude = 4\n\tX = 5\n\tY = 6\n\nColumns = {\n\tColumnType.Time: {\"time\", \"date\", \"year\"},\n\tColumnType.Name: {\"name\", \"orf\", \"uniqid\", \"face\", \"triangle\"},\n\tColumnType.Value: {\"value\", \"weight\", \"intensity\"},\n\tColumnType.Longitude: {\"longitude\", \"long\"},\n\tColumnType.Latitude: {\"latitude\", \"lat\"},\n\n\t# This may seem redundant, but it handles case-folding\n\tColumnType.X: {\"x\"},\n\tColumnType.Y: {\"y\"}\n}\n\n\ndef Filter(columns, ctype: ColumnType, good: list = [], bad: list = [], only_one=False, return_unknown=False):\n\t\"\"\"\n\t@brief Filters available column names based on what input we want\n\t@param columns: The columns of the DataFrame (Usually just df.columns)\n\t@param ctype: The type of column we're looking for (Look at the ColumnType Enum)\n\t@param good: A list of column names on top of those defined by the type to be included\n\t@param bad: A list of column names on top of those defined by the type to be excluded from the result.\n\t@return: A list of column names to use.\n\t@info Results are\n\t\"\"\"\n\n\t# Fold cases\n\tfolded = [column.lower() for column in columns]\n\n\t# Add and remove what user asked for, filtering None\n\toptions = set(folded)\n\tif bad: options -= set([b.lower() for b in bad if b])\n\tif good: options &= set([g.lower() for g in good if g])\n\n\t# If we hit the column type, take the intersection, otherwise take the difference\n\tfor key, value in Columns.items():\n\n\t\t# If we exclude unknown values, we always overwrite.\n\t\t# If we aren't excluding unknowns, we replace if the intersection yielded *something*\n\t\tif key == ctype:\n\t\t\tintersection = options & value\n\t\t\tif not return_unknown or intersection: options = intersection\n\t\telse: options -= value\n\n\tif options:\n\t\t# Get the valid indices, and sort them in ascending order\n\t\tindices = [folded.index(value) for value in options]\n\t\tindices.sort()\n\n\t\t# Get the original column names, without case-folding, and return as a list.\n\t\treturn columns[indices[0]] if only_one else [columns[index] for index in indices]\n\telse:\n\t\treturn None\n\n\ndef FillColumnSelection(columns, ctype, name, bad = []):\n\t\"\"\"\n\t@brief Updates a column name selection dialog\n\t@param columns The list of columns to choose from\n\t@param ctype: The type of column we're looking for\n\t@param default: The default index if there are no valid columns\n\t@param name: The name of the ui element to update.\n\t\"\"\"\n\n\t# Filter the columns\n\tnames = Filter(columns, ctype, bad = bad)\n\n\t# If we've got some choices, choose the first as the default.\n\tif names: selected = names[0]\n\n\t# If we don't, allow unknown variables and take from that one\n\t# This removes ones we know aren't correct (like \"time\" for when we want a value)\n\telse:\n\t\tnames = Filter(columns, ctype, bad = bad, return_unknown=True)\n\t\tif not names: return None\n\t\tselected = names[0]\n\n\t# Update the ui\n\tui.update_select(id=name, choices=names, selected=selected)\n\treturn selected\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef DefaultHandler(n, i):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle csv, xlsx, and defaults all other files to read_table\n\t\t@param n: The name of the file. We use this for pattern matching against the suffix.\n\t\t@param i: The binary of the file (Either via read() or BytesIO())\n\t\t@returns: A null-filled DataFrame.\n\t\t\"\"\"\n\n\t\t# Get the function\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": func = read_csv\n\t\t\tcase \".xlsx\": func = read_excel\n\t\t\tcase _: df = func = read_table\n\n\t\t# Read the table once.\n\t\tdf = func(i).fillna(0)\n\n\t\t# If the first column value is a float, we assume it's data, and not column names.\n\t\t# Re-read the DataFrame with generic column names instead\n\t\ttry:\n\t\t\tfloat(df.columns[0])\n\t\t\ti.seek(0)\n\t\t\tdf = func(i, header=None, names=[f\"Column {i}\" for i in range(df.shape[1])])\n\t\texcept ValueError: pass\n\t\treturn df\n\n\n\t@staticmethod\n\tasync def Remote(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\n\n\n\t@staticmethod\n\tasync def Local(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary cache is immutable, and is used when the resource has not been fetched before.\n\t\tself._primary = {}\n\n\t\t# The secondary cache is mutable, and is populated by the primary cache. Purge deletes from here.\n\t\tself._secondary = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself.Download = lambda url: Cache.Remote(url)\n\t\t\tself.Source = \"https://raw.githubusercontent.com/WishartLab/heatmapper2/main/{}/example_input/\".format(project)\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself.Download = lambda url: Cache.Local(url)\n\t\t\tself.Source = \"../example_input/\"\n\n\n\tasync def Load(self, input, copy=False):\n\t\tn = await self.N(input);\n\t\tdf = DataFrame() if n is None else self._secondary[n]\n\t\treturn deepcopy(df) if copy else df\n\n\n\tasync def N(self, input):\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@returns: The identifier. You should probably use Load() unless you need this.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\n\t\t\t# Populate the base cache, if we need to\n\t\t\tif n not in self._primary: source = open(file[0][\"datapath\"], 'r')\n\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tif n not in self._primary: source = BytesIO(await self.Download(self.Source + n))\n\n\t\tif n not in self._primary:\n\t\t\ttry: self._primary[n] = self._handler(n, source)\n\t\t\texcept Exception: return None\n\t\tif n not in self._secondary: self._secondary[n] = deepcopy(self._primary[n])\n\t\treturn n\n\n\n\tdef Cache(self): return self._secondary\n\n\n\tasync def Update(self, input):\n\t\t\"\"\"\n\t\t@brief Updates information within the secondary cache based on user selection\n\t\t@param input: The Shiny input. Importantly, these must be defined:\n\t\t\tinput.TableRow: The row to modify\n\t\t\tinput.TableCol: The column to modify\n\t\t\tinput.TableVal: What the user wants to set as the new value\n\t\t@info This function should be called on a reactive hook for a \"Update\" button.\n\t\t\"\"\"\n\n\t\t# Get the data\n\t\tdf = await self.Load(input)\n\t\trow_count, column_count = df.shape\n\t\trow, column = input.TableRow(), input.TableCol()\n\n\t\t# So long as row and column are sane, update.\n\t\tif row < row_count and column < column_count:\n\t\t\tmatch input.Type():\n\t\t\t\tcase \"Integer\": df.iloc[row, column] = int(input.TableVal())\n\t\t\t\tcase \"Float\": df.iloc[row, column] = float(input.TableVal())\n\t\t\t\tcase \"String\": df.iloc[row, column] = input.TableVal()\n\n\n\tasync def Purge(self, input):\n\t\t\"\"\"\n\t\t@brief Purges the secondary cache of whatever the user has uploaded/selected\n\t\t@param input: The Shiny input. See N() for required objects.\n\t\t@info This function should be called on a reactive hook for a \"Reset\" button.\n\t\t\"\"\"\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\tdel self._secondary[n]\n\n\ndef TableValueUpdate(df, input):\n\t\"\"\"\n\t@brief Updates the value displayed in the TableVal based on the current selection\n\t@param df The DataFrame\n\t@param input The shiny input\n\t\"\"\"\n\n\trows, columns = df.shape\n\trow, column = int(input.TableRow()), int(input.TableCol())\n\tif 0 <= row <= rows and 0 <= column <= columns:\n\t\tui.update_text(id=\"TableVal\", label=\"Value (\" + str(df.iloc[row, column]) + \")\"),\n\n\ndef NavBar(current):\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\treturn [\n\t\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\n\t\tui.navset_bar(\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/expression/site/index.html>Expression</a>'), value=\"Expression\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/pairwise/site/index.html>Pairwise</a>'), value=\"Pairwise\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/image/site/index.html>Image</a>'), value=\"Image\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/geomap/site/index.html>Geomap</a>'), value=\"Geomap\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/geocoordinate/site/index.html>Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/3d/site/index.html>3D</a>'), value=\"3D\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/about/site/index.html>About</a>'), value=\"About\"),\n\t\t\t\ttitle=\"Heatmapper\",\n\t\t\t\tselected=current,\n\t\t)\n\t]\n\n\ndef FileSelection(examples, types):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t\"\"\"\n\n\t# If the user needs help with the formatting.\n\treturn [ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/about/site/index.html>Data Format</a>'),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", \"Choose a File\", accept=types, multiple=False),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[8,2],\n\t\t)\n\t)]\n\n\ndef MainTab(*args, m_type=ui.output_plot):\n\treturn ui.navset_tab(\n\t\tui.nav_panel(\"Interactive\", m_type(\"Heatmap\", height=\"75vh\"), value=\"Interactive\"),\n\t\tui.nav_panel(\"Table\",\n\t\t\tui.layout_columns(\n\t\t\t\tui.input_numeric(\"TableRow\", \"Row\", 0),\n\t\t\t\tui.input_numeric(\"TableCol\", \"Column\", 0),\n\t\t\t\tui.input_text(\"TableVal\", \"Value\", 0),\n\t\t\t\tui.input_select(id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"]),\n\t\t\t\tcol_widths=[2,2,6,2],\n\t\t\t),\n\t\t\tui.layout_columns(\n\t\t\t\tui.input_action_button(\"Update\", \"Update\"),\n\t\t\t\tui.input_action_button(\"Reset\", \"Reset Values\"),\n\t\t\t),\n\t\t\tui.output_data_frame(\"LoadedTable\")\n\t\t),\n\t\t*args,\n\t\tid=\"MainTab\"\n\t)", "type": "text"}]