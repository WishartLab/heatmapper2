[{"name": "app.py", "content": "#\n# Heatmapper\n# Geocoordinate\n#\n# This file contains the ShinyLive application for Geocoordinate Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom folium import Map as FoliumMap\nfrom folium.plugins import HeatMap, HeatMapWithTime\nfrom pandas import DataFrame\n\nfrom shared import Table, Cache, NavBar, FileSelection\n\n# Fine, Shiny\nimport branca, certifi, xyzservices\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset shows deaths from a cholera outbreak in 1854. John Snow used this data in conjunction with local pump locations as evidence that cholera is spread by contaminated water. A digitised version of the data is available online, courtesy of Robin Wilson (robin@rtwilson.com).\",\n\t\t\"example2.txt\": \"This example data set shows bike thefts in Vancouver in 2011. The data was obtained from a 2013 Vancouver Sun blog post by Chad Skelton.\",\n\t\t\"example3.txt\": \"This example data set shows the location of traffic signals in Toronto. The data was obtained from Toronto Open Data. The idea to use this data set comes from this R-bloggers post by Myles Harrison.\",\n\t\t\"example1.csv\": \"Random data\",\n\t\t\"example21.csv\": \"A parsed version of the Northeast and North Central Pacific hurricane database (HURDAT2) 2000-2022, available at https://www.nhc.noaa.gov/data/\",\n\t\t\"example3.csv\": \"Recorded mean temperature (F) in the USA in 2023 as measured by the EPA, available at https://aqs.epa.gov/aqsweb/airdata/FileFormats.html#_daily_summary_files\",\n\n\t}\n\n\tDataCache = Cache(\"geocoordinate\")\n\n\n\tdef GenerateMap(df, map):\n\t\t\"\"\"\n\t\t@brief Generates a standard heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\tdefault_value = input.ValueColumn()\n\t\tif default_value is None or default_value not in df: return\n\n\t\t# Get the long and lat.\n\t\tlongitudes = df[\"Longitude\"].tolist()\n\t\tlatitudes = df[\"Latitude\"].tolist()\n\n\t\tvalues = df[default_value].tolist()\n\n\t\tHeatMap(list(zip(latitudes, longitudes, values)),\n\t\tmin_opacity=input.Opacity(),\n\t\tradius=input.Radius(),\n\t\tblur=input.Blur()).add_to(map)\n\t\tmap.fit_bounds(map.get_bounds())\n\n\n\tdef GenerateTemporalMap(df, map):\n\t\t\"\"\"\n\t\t@brief Generates a temporal heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\tdefault_value = input.ValueColumn()\n\t\tif default_value is None or default_value not in df: return\n\t\tdefault_time = input.TimeColumn()\n\t\tif default_time is None or default_time not in df: return\n\n\t\t# Sort by time so we can work linearly.\n\t\tdf = df.sort_values(by=default_time)\n\n\t\t# Normalize\n\t\tvalues = df[default_value]\n\t\tdf[default_value] = (values - values.min()) / (values.max() - values.min())\n\n\t\t# Group data by time\n\t\tdata = []\n\t\tfor time, group_df in df.groupby(default_time):\n\t\t\ttime_slice = []\n\t\t\tfor _, row in group_df.iterrows():\n\t\t\t\tlat = row[\"Latitude\"]\n\t\t\t\tlon = row[\"Longitude\"]\n\t\t\t\tvalue = row[default_value]\n\t\t\t\ttime_slice.append([lat, lon, value])\n\t\t\tdata.append(time_slice)\n\n\t\t# Make the heamap\n\t\tHeatMapWithTime(\n\t\t\tdata,\n\t\t\tindex=df[default_time].drop_duplicates().to_list(),\n\t\t\tradius=input.Radius(),\n\t\t\tmin_opacity=input.Opacity(),\n\t\t\tblur=input.Blur(),\n\t\t\tmax_speed=60,).add_to(map)\n\n\n\tasync def LoadMap():\n\t\t\"\"\"\n\t\t@brief Generates a map with the provided information\n\t\t@returns the Folium.Map\n\t\t\"\"\"\n\n\t\tdf = await DataCache.Load(input)\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty: return FoliumMap((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\n\t\tmap = FoliumMap((df[\"Latitude\"][0], df[\"Longitude\"][0]), tiles=input.MapType())\n\n\t\t# Generate the right heatmap.\n\t\tif input.Temporal(): GenerateTemporalMap(df, map)\n\t\telse: GenerateMap(df, map)\n\t\treturn map\n\n\n\t@output\n\t@render.data_frame\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, ignore_none=False, ignore_init=False)\n\tasync def LoadedTable(): return await DataCache.Load(input)\n\n\n\t@output\n\t@render.ui\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, input.TimeColumn, input.ValueColumn, input.Temporal, input.MapType, input.Opacity, input.Radius, input.Blur, ignore_none=False, ignore_init=False)\n\tasync def Map(): return await LoadMap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@render.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await DataCache.Load(input); yield df.to_string()\n\n\n\t@render.download(filename=\"heatmap.html\")\n\tasync def DownloadHeatmap(): m = await LoadMap(); yield m.get_root().render()\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Update)\n\tasync def Update(): await DataCache.Update(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Reset)\n\tasync def Reset(): await DataCache.Purge(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.TableRow, input.TableCol, input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateTableValue():\n\t\t\"\"\"\n\t\t@brief Updates the label for the Value input to display the current value.\n\t\t\"\"\"\n\t\tdf = await DataCache.Load(input)\n\n\t\trows, columns = df.shape\n\t\trow, column = int(input.TableRow()), int(input.TableCol())\n\n\t\tif 0 <= row <= rows and 0 <= column <= columns:\n\t\t\tui.update_text(id=\"TableVal\", label=\"Value (\" + str(df.iloc[row, column]) + \")\"),\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateColumns():\n\n\t\t# Give options for the key and value columns\n\t\tdf = await DataCache.Load(input)\n\t\tchoices = df.columns.tolist()\n\t\tif choices:\n\n\t\t\tdefault_time = None\n\t\t\tfor time in [\"Time\", \"Date\"]:\n\t\t\t\tif time in df: default_time = time; break\n\t\t\tif not default_time:\n\t\t\t\tcolumns = df.columns.tolist()\n\t\t\t\tfor n in [\"Longitude\", \"Latitude\", \"Weight\", \"Intensity\", \"Value\"]:\n\t\t\t\t\tif n in columns:\n\t\t\t\t\t\tcolumns.remove(n)\n\t\t\t\tif columns:\n\t\t\t\t\tdefault_time = columns[0]\n\t\t\t\telse:\n\t\t\t\t\tdefault_time = df.columns[0]\n\n\t\t\tdefault_value = None\n\t\t\tfor value in [\"Weight\", \"Intensity\", \"Value\"]:\n\t\t\t\tif value in df: default_value = value; break\n\t\t\tif not default_value:\n\t\t\t\tcolumns = df.columns.tolist()\n\t\t\t\tfor n in [\"Longitude\", \"Latitude\", \"Time\", \"Date\"]:\n\t\t\t\t\tif n in columns:\n\t\t\t\t\t\tcolumns.remove(n)\n\t\t\t\tif columns:\n\t\t\t\t\tdefault_value = columns[0]\n\t\t\t\telse:\n\t\t\t\t\tdefault_value = df.columns[0]\n\n\t\t\tui.update_select(id=\"TimeColumn\", choices=choices, selected=default_time)\n\t\t\tui.update_select(id=\"ValueColumn\", choices=choices, selected=default_value)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Temporal)\n\tdef UpdateSliders():\n\t\t\"\"\"\n\t\t@brief Heatmapper and HeatmapperWithTime have different bounds for these rules, so we\n\t\tupdate on the fly.\n\t\t\"\"\"\n\t\tif input.Temporal():\n\t\t\tui.update_slider(id=\"Opacity\", value=0.6, min=0.0, max=1.0, step=0.1)\n\t\t\tui.update_slider(id=\"Radius\", value=15, min=1, max=50, step=1)\n\t\t\tui.update_slider(id=\"Blur\", value=0.8, min=0.0, max=1.0, step=0.1)\n\t\telse:\n\t\t\tui.update_slider(id=\"Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.update_slider(id=\"Radius\", value=25, min=5, max=50, step=5),\n\t\t\tui.update_slider(id=\"Blur\", value=15, min=1, max=30, step=1),\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(\"Geocoordinate\"),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(\n\t\t\t\texamples={\n\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\"example3.txt\": \"Example 3\",\n\t\t\t\t\t\"example1.csv\": \"Example 4\",\n\t\t\t\t\t\"example21.csv\": \"Example 5\",\n\t\t\t\t\t\"example3.csv\": \"Example 6\"\n\t\t\t\t},\n\t\t\t\ttypes=[\".csv\", \".txt\", \".xlsx\"]\n\t\t\t),\n\n\t\t\tui.input_checkbox(id=\"Temporal\", label=\"Temporal Choropleth\"),\n\n\t\t\t# Only provide a temporal column if we're working with time\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.Temporal\",\n\t\t\t\tui.input_select(id=\"TimeColumn\", label=\"Time Column\", choices=[], multiple=False),\n\t\t\t),\n\n\t\t\tui.input_select(id=\"ValueColumn\", label=\"Value Column\", choices=[], multiple=False),\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.input_slider(id=\"Radius\", label=\"Size of Points\", value=25, min=5, max=50, step=5),\n\t\t\tui.input_slider(id=\"Blur\", label=\"Blurring\", value=15, min=1, max=30, step=1),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.download_button(\"DownloadHeatmap\", \"Heatmap\"),\n\t\t\tui.download_button(\"DownloadTable\", \"Table\"),\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\t\t\t\tTable,\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom sys import modules\nfrom copy import deepcopy\nfrom pathlib import Path\n\n# If pyodide is found, we're running WebAssembly.\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\n# Otherwise,\nelse:\n\tfrom os.path import exists\n\tPyodide = False\n\n\nTemporalColumns = {\"time\", \"date\"}\n\n\ndef Filter(columns, good_columns, bad_columns):\n\tret = None\n\tfor column in columns:\n\t\tlowered = column.lower()\n\t\tif lowered in good_columns:\n\t\t\treturn column\n\t\telif lowered in bad_columns:\n\t\t\tbreak\n\t\telif ret is not None:\n\t\t\tret = column\n\treturn ret\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef DefaultHandler(n, i):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle csv, xlsx, and defaults all other files to read_table\n\t\t@param n: The name of the file. We use this for pattern matching against the suffix.\n\t\t@param i: The binary of the file (Either via read() or BytesIO())\n\t\t@returns: A null-filled DataFrame.\n\t\t\"\"\"\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": df = read_csv(i)\n\t\t\tcase \".xlsx\": df = read_excel(i)\n\t\t\tcase _: df = read_table(i)\n\t\treturn df.fillna(0)\n\n\n\t@staticmethod\n\tasync def Remote(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\n\n\n\t@staticmethod\n\tasync def Local(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary cache is immutable, and is used when the resource has not been fetched before.\n\t\tself._primary = {}\n\n\t\t# The secondary cache is mutable, and is populated by the primary cache. Purge deletes from here.\n\t\tself._secondary = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself.Download = lambda url: Cache.Remote(url)\n\t\t\tself.Source = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/{}/example_input/\".format(project)\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself.Download = lambda url: Cache.Local(url)\n\t\t\tself.Source = \"../example_input/\"\n\n\n\tasync def Load(self, input, copy=False):\n\t\tn = await self.N(input);\n\t\tdf = DataFrame() if n is None else self._secondary[n]\n\t\treturn deepcopy(df) if copy else df\n\n\n\tasync def N(self, input):\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@returns: The identifier. You should probably use Load() unless you need this.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\n\t\t\t# Populate the base cache, if we need to\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, read(file[0][\"datapath\"], \"wb\"))\n\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, BytesIO(await self.Download(self.Source + n)))\n\t\tif n not in self._secondary: self._secondary[n] = deepcopy(self._primary[n])\n\t\treturn n\n\n\n\tdef Cache(self): return self._secondary\n\n\n\tasync def Update(self, input):\n\t\t\"\"\"\n\t\t@brief Updates information within the secondary cache based on user selection\n\t\t@param input: The Shiny input. Importantly, these must be defined:\n\t\t\tinput.TableRow: The row to modify\n\t\t\tinput.TableCol: The column to modify\n\t\t\tinput.TableVal: What the user wants to set as the new value\n\t\t@info This function should be called on a reactive hook for a \"Update\" button.\n\t\t\"\"\"\n\n\t\t# Get the data\n\t\tdf = await self.Load(input)\n\t\trow_count, column_count = df.shape\n\t\trow, column = input.TableRow(), input.TableCol()\n\n\t\t# So long as row and column are sane, update.\n\t\tif row < row_count and column < column_count:\n\t\t\tmatch input.Type():\n\t\t\t\tcase \"Integer\": df.iloc[row, column] = int(input.TableVal())\n\t\t\t\tcase \"Float\": df.iloc[row, column] = float(input.TableVal())\n\t\t\t\tcase \"String\": df.iloc[row, column] = input.TableVal()\n\n\n\tasync def Purge(self, input):\n\t\t\"\"\"\n\t\t@brief Purges the secondary cache of whatever the user has uploaded/selected\n\t\t@param input: The Shiny input. See N() for required objects.\n\t\t@info This function should be called on a reactive hook for a \"Reset\" button.\n\t\t\"\"\"\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\tdel self._secondary[n]\n\n\ndef NavBar(current):\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\treturn [\n\t\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\n\t\tui.navset_bar(\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html>Expression</a>'), value=\"Expression\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html>Pairwise</a>'), value=\"Pairwise\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html>Image</a>'), value=\"Image\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html>Geomap</a>'), value=\"Geomap\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html>Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>About</a>'), value=\"About\"),\n\t\t\t\ttitle=\"Heatmapper\",\n\t\t\t\tselected=current,\n\t\t)\n\t]\n\n\ndef FileSelection(examples, types):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t\"\"\"\n\n\t# If the user needs help with the formatting.\n\treturn [ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>'),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", \"Choose a File\", accept=types, multiple=False),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[10,2],\n\t\t)\n\t)]\n\n\n# The Table element\nTable = ui.nav_panel(\"Table\",\n\tui.layout_columns(\n\t\tui.input_numeric(\"TableRow\", \"Row\", 0),\n\t\tui.input_numeric(\"TableCol\", \"Column\", 0),\n\t\tui.input_text(\"TableVal\", \"Value\", 0),\n\t\tui.input_select(id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"]),\n\t\tcol_widths=[2,2,6,2],\n\t),\n\tui.layout_columns(\n\t\tui.input_action_button(\"Update\", \"Update\"),\n\t\tui.input_action_button(\"Reset\", \"Reset Values\"),\n\t),\n\tui.output_data_frame(\"LoadedTable\"),\n)\n", "type": "text"}]