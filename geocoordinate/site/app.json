[{"name": "app.py", "content": "#\n# Heatmapper\n# Geocoordinate\n#\n# This file contains the ShinyLive application for Geocoordinate Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom folium import Map as FoliumMap\nfrom folium.plugins import HeatMap, HeatMapWithTime\nfrom pandas import DataFrame\n\nfrom shared import Table, Cache, NavBar, FileSelection, Filter, ColumnType, FillColumnSelection\n\n# Fine, Shiny\nimport branca, certifi, xyzservices\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset shows deaths from a cholera outbreak in 1854. John Snow used this data in conjunction with local pump locations as evidence that cholera is spread by contaminated water. A digitised version of the data is available online, courtesy of Robin Wilson (robin@rtwilson.com).\",\n\t\t\"example2.txt\": \"This example data set shows bike thefts in Vancouver in 2011. The data was obtained from a 2013 Vancouver Sun blog post by Chad Skelton.\",\n\t\t\"example3.txt\": \"This example data set shows the location of traffic signals in Toronto. The data was obtained from Toronto Open Data. The idea to use this data set comes from this R-bloggers post by Myles Harrison.\",\n\t\t\"example1.csv\": \"Random data\",\n\t\t\"example21.csv\": \"A parsed version of the Northeast and North Central Pacific hurricane database (HURDAT2) 2000-2022, available at https://www.nhc.noaa.gov/data/\",\n\t\t\"example3.csv\": \"Recorded mean temperature (F) in the USA in 2023 as measured by the EPA, available at https://aqs.epa.gov/aqsweb/airdata/FileFormats.html#_daily_summary_files\",\n\n\t}\n\n\tDataCache = Cache(\"geocoordinate\")\n\n\n\tdef GenerateMap(df, map, v_col, lon_col, lat_col):\n\t\t\"\"\"\n\t\t@brief Generates a standard heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\t# Get each column\n\t\tlongitudes = df[lon_col].tolist()\n\t\tlatitudes = df[lat_col].tolist()\n\t\tvalues = [1] * len(latitudes) if input.Uniform() else df[v_col].tolist()\n\n\t\tHeatMap(list(zip(latitudes, longitudes, values)),\n\t\tmin_opacity=input.Opacity(),\n\t\tradius=input.Radius(),\n\t\tblur=input.Blur()).add_to(map)\n\t\tmap.fit_bounds(map.get_bounds())\n\n\n\tdef GenerateTemporalMap(df, map, t_col, v_col, lon_col, lat_col):\n\t\t\"\"\"\n\t\t@brief Generates a temporal heatmap\n\t\t@param df The DataFrame containing the data\n\t\t@param map The folium map to attach the heatmap to.\n\t\t\"\"\"\n\n\t\t# Sort by time so we can work linearly.\n\t\tdf = df.sort_values(by=t_col)\n\n\t\t# Normalize\n\t\tif not input.Uniform():\n\t\t\tvalues = df[v_col]\n\t\t\tdf[v_col] = (values - values.min()) / (values.max() - values.min())\n\n\t\t# Group data by time\n\t\tdata = []\n\t\tfor time, group_df in df.groupby(t_col):\n\t\t\ttime_slice = []\n\t\t\tfor _, row in group_df.iterrows():\n\t\t\t\tlat = row[lat_col]\n\t\t\t\tlon = row[lon_col]\n\t\t\t\tvalue = 1 if input.Uniform() else row[v_col]\n\t\t\t\ttime_slice.append([lat, lon, value])\n\t\t\tdata.append(time_slice)\n\n\t\t# Make the heamap\n\t\tHeatMapWithTime(\n\t\t\tdata,\n\t\t\tindex=df[t_col].drop_duplicates().to_list(),\n\t\t\tradius=input.Radius(),\n\t\t\tmin_opacity=input.Opacity(),\n\t\t\tblur=input.Blur(),\n\t\t\tmax_speed=60).add_to(map)\n\n\n\tasync def LoadMap():\n\t\t\"\"\"\n\t\t@brief Generates a map with the provided information\n\t\t@returns the Folium.Map\n\t\t\"\"\"\n\n\t\tdf = await DataCache.Load(input)\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty: return FoliumMap((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\t\tif not input.Uniform():\n\t\t\tv_col = input.ValueColumn()\n\t\t\tif v_col not in df: return\n\t\telse:\n\t\t\tv_col = None\n\n\t\tlon_col = Filter(df.columns, ColumnType.Longitude, only_one=True)\n\t\tlat_col = Filter(df.columns, ColumnType.Latitude, only_one=True)\n\n\t\tmap = FoliumMap((df[lat_col][0], df[lon_col][0]), tiles=input.MapType())\n\n\t\t# Generate the right heatmap.\n\t\tif input.Temporal():\n\t\t\tt_col = input.TimeColumn()\n\t\t\tif t_col not in df: return\n\t\t\tGenerateTemporalMap(df, map, t_col, v_col, lon_col, lat_col)\n\t\telse:\n\t\t\tGenerateMap(df, map, v_col, lon_col, lat_col)\n\t\treturn map\n\n\n\t@output\n\t@render.data_frame\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, ignore_none=False, ignore_init=False)\n\tasync def LoadedTable(): return await DataCache.Load(input)\n\n\n\t@output\n\t@render.ui\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, input.TimeColumn, input.ValueColumn, input.Temporal, input.MapType, input.Opacity, input.Radius, input.Blur, input.Uniform, ignore_none=False, ignore_init=False)\n\tasync def Map(): return await LoadMap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@render.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await DataCache.Load(input); yield df.to_string()\n\n\n\t@render.download(filename=\"heatmap.html\")\n\tasync def DownloadHeatmap(): m = await LoadMap(); yield m.get_root().render()\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Update)\n\tasync def Update(): await DataCache.Update(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Reset)\n\tasync def Reset(): await DataCache.Purge(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.TableRow, input.TableCol, input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateTableValue():\n\t\t\"\"\"\n\t\t@brief Updates the label for the Value input to display the current value.\n\t\t\"\"\"\n\t\tdf = await DataCache.Load(input)\n\n\t\trows, columns = df.shape\n\t\trow, column = int(input.TableRow()), int(input.TableCol())\n\n\t\tif 0 <= row <= rows and 0 <= column <= columns:\n\t\t\tui.update_text(id=\"TableVal\", label=\"Value (\" + str(df.iloc[row, column]) + \")\"),\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Example, input.File, input.Reset, input.Update, input.Temporal, input.Uniform)\n\tasync def UpdateColumns():\n\t\tdf = await DataCache.Load(input)\n\t\tif not input.Uniform():\n\t\t\tif not FillColumnSelection(df.columns, ColumnType.Value, \"ValueColumn\"):\n\t\t\t\tui.update_checkbox(id=\"Uniform\", value=True)\n\t\tif input.Temporal(): FillColumnSelection(df.columns, ColumnType.Time, \"TimeColumn\")\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Temporal)\n\tdef UpdateSliders():\n\t\t\"\"\"\n\t\t@brief Heatmapper and HeatmapperWithTime have different bounds for these rules, so we\n\t\tupdate on the fly.\n\t\t\"\"\"\n\t\tif input.Temporal():\n\t\t\tui.update_slider(id=\"Opacity\", value=0.6, min=0.0, max=1.0, step=0.1)\n\t\t\tui.update_slider(id=\"Radius\", value=15, min=1, max=50, step=1)\n\t\t\tui.update_slider(id=\"Blur\", value=0.8, min=0.0, max=1.0, step=0.1)\n\t\telse:\n\t\t\tui.update_slider(id=\"Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.update_slider(id=\"Radius\", value=25, min=5, max=50, step=5),\n\t\t\tui.update_slider(id=\"Blur\", value=15, min=1, max=30, step=1),\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(\"Geocoordinate\"),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(\n\t\t\t\texamples={\n\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\"example3.txt\": \"Example 3\",\n\t\t\t\t\t\"example1.csv\": \"Example 4\",\n\t\t\t\t\t\"example21.csv\": \"Example 5\",\n\t\t\t\t\t\"example3.csv\": \"Example 6\"\n\t\t\t\t},\n\t\t\t\ttypes=[\".csv\", \".txt\", \".xlsx\"]\n\t\t\t),\n\n\t\t\tui.input_checkbox(id=\"Temporal\", label=\"Temporal Heatmap\"),\n\t\t\tui.input_checkbox(id=\"Uniform\", label=\"Uniform Values\"),\n\n\t\t\t# Only provide a temporal column if we're working with time\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.Temporal\",\n\t\t\t\tui.input_select(id=\"TimeColumn\", label=\"Time Column\", choices=[], multiple=False),\n\t\t\t),\n\n\t\t\t# Only give an option if we aren't working with a uniform value range.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"!input.Uniform\",\n\t\t\t\tui.input_select(id=\"ValueColumn\", label=\"Value Column\", choices=[], multiple=False),\n\t\t\t),\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.input_slider(id=\"Radius\", label=\"Size of Points\", value=25, min=5, max=50, step=5),\n\t\t\tui.input_slider(id=\"Blur\", label=\"Blurring\", value=15, min=1, max=30, step=1),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.download_button(\"DownloadHeatmap\", \"Heatmap\"),\n\t\t\tui.download_button(\"DownloadTable\", \"Table\"),\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\t\t\t\tTable,\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom sys import modules\nfrom copy import deepcopy\nfrom pathlib import Path\nfrom enum import Enum\n\n\n# If pyodide is found, we're running WebAssembly.\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\n# Otherwise,\nelse:\n\tfrom os.path import exists\n\tPyodide = False\n\n\nclass ColumnType(Enum):\n\tTime = 0\n\tName = 1\n\tValue = 2\n\tLongitude = 3\n\tLatitude = 4\n\nColumns = {\n\tColumnType.Time: {\"time\", \"date\", \"year\"},\n\tColumnType.Name: {\"name\", \"orf\", \"uniqid\"},\n\tColumnType.Value: {\"value\", \"weight\", \"intensity\"},\n\tColumnType.Longitude: {\"longitude\", \"long\"},\n\tColumnType.Latitude: {\"latitude\", \"lat\"}\n}\n\n\ndef Filter(columns, ctype: ColumnType, good: list = [], bad: list = [], only_one=False, return_unknown=False):\n\t\"\"\"\n\t@brief Filters available column names based on what input we want\n\t@param columns: The columns of the DataFrame (Usually just df.columns)\n\t@param ctype: The type of column we're looking for (Look at the ColumnType Enum)\n\t@param good: A list of column names on top of those defined by the type to be included\n\t@param bad: A list of column names on top of those defined by the type to be excluded from the result.\n\t@return: A list of column names to use.\n\t@info Results are\n\t\"\"\"\n\n\t# Fold cases\n\tfolded = [column.lower() for column in columns]\n\n\toptions = set(folded)\n\tif bad: options -= set([b.lower() for b in bad])\n\tif good: options &= set([g.lower() for g in good])\n\n\t# If we hit the column type, take the intersection, otherwise take the difference\n\tfor key, value in Columns.items():\n\n\t\t# If we exclude unknown values, we always overwrite.\n\t\t# If we aren't excluding unknowns, we replace if the intersection yielded *something*\n\t\tif key == ctype:\n\t\t\tintersection = options & value\n\t\t\tif not return_unknown or intersection: options = intersection\n\t\telse: options -= value\n\n\tif options:\n\t\t# Get the valid indices, and sort them in ascending order\n\t\tindices = [folded.index(value) for value in options]\n\t\tindices.sort()\n\n\t\t# Get the original column names, without case-folding, and return as a list.\n\t\treturn columns[indices[0]] if only_one else [columns[index] for index in indices]\n\telse:\n\t\treturn None\n\n\ndef FillColumnSelection(columns, ctype, name, bad = []):\n\t\"\"\"\n\t@brief Updates a column name selection dialog\n\t@param columns The list of columns to choose from\n\t@param ctype: The type of column we're looking for\n\t@param default: The default index if there are no valid columns\n\t@param name: The name of the ui element to update.\n\t\"\"\"\n\n\t# Filter the columns\n\tnames = Filter(columns, ctype, bad = bad)\n\n\t# If we've got some choices, choose the first as the default.\n\tif names: selected = names[0]\n\n\t# If we don't, allow unknown variables and take from that one\n\t# This removes ones we know aren't correct (like \"time\" for when we want a value)\n\telse:\n\t\tnames = Filter(columns, ctype, bad = bad, return_unknown=True)\n\t\tif not names: return None\n\t\tselected = names[0]\n\n\t# Update the ui\n\tui.update_select(id=name, choices=names, selected=selected)\n\treturn selected\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef DefaultHandler(n, i):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle csv, xlsx, and defaults all other files to read_table\n\t\t@param n: The name of the file. We use this for pattern matching against the suffix.\n\t\t@param i: The binary of the file (Either via read() or BytesIO())\n\t\t@returns: A null-filled DataFrame.\n\t\t\"\"\"\n\n\t\t# Get the function\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": func = read_csv\n\t\t\tcase \".xlsx\": func = read_excel\n\t\t\tcase _: df = func = read_table\n\n\t\t# Read the table once.\n\t\tdf = func(i).fillna(0)\n\n\t\t# If the first column value is a float, we assume it's data, and not column names.\n\t\t# Re-read the DataFrame with generic column names instead\n\t\ttry:\n\t\t\tfloat(df.columns[0])\n\t\t\ti.seek(0)\n\t\t\tdf = func(i, header=None, names=[f\"Column {i}\" for i in range(df.shape[1])])\n\t\texcept ValueError: pass\n\t\treturn df\n\n\n\t@staticmethod\n\tasync def Remote(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\n\n\n\t@staticmethod\n\tasync def Local(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary cache is immutable, and is used when the resource has not been fetched before.\n\t\tself._primary = {}\n\n\t\t# The secondary cache is mutable, and is populated by the primary cache. Purge deletes from here.\n\t\tself._secondary = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself.Download = lambda url: Cache.Remote(url)\n\t\t\tself.Source = \"https://raw.githubusercontent.com/WishartLab/heatmapper2/main/{}/example_input/\".format(project)\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself.Download = lambda url: Cache.Local(url)\n\t\t\tself.Source = \"../example_input/\"\n\n\n\tasync def Load(self, input, copy=False):\n\t\tn = await self.N(input);\n\t\tdf = DataFrame() if n is None else self._secondary[n]\n\t\treturn deepcopy(df) if copy else df\n\n\n\tasync def N(self, input):\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@returns: The identifier. You should probably use Load() unless you need this.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\n\t\t\t# Populate the base cache, if we need to\n\t\t\tif n not in self._primary: source = open(file[0][\"datapath\"], 'r')\n\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tif n not in self._primary: source = BytesIO(await self.Download(self.Source + n))\n\n\t\tif n not in self._primary: self._primary[n] = self._handler(n, source)\n\t\tif n not in self._secondary: self._secondary[n] = deepcopy(self._primary[n])\n\t\treturn n\n\n\n\tdef Cache(self): return self._secondary\n\n\n\tasync def Update(self, input):\n\t\t\"\"\"\n\t\t@brief Updates information within the secondary cache based on user selection\n\t\t@param input: The Shiny input. Importantly, these must be defined:\n\t\t\tinput.TableRow: The row to modify\n\t\t\tinput.TableCol: The column to modify\n\t\t\tinput.TableVal: What the user wants to set as the new value\n\t\t@info This function should be called on a reactive hook for a \"Update\" button.\n\t\t\"\"\"\n\n\t\t# Get the data\n\t\tdf = await self.Load(input)\n\t\trow_count, column_count = df.shape\n\t\trow, column = input.TableRow(), input.TableCol()\n\n\t\t# So long as row and column are sane, update.\n\t\tif row < row_count and column < column_count:\n\t\t\tmatch input.Type():\n\t\t\t\tcase \"Integer\": df.iloc[row, column] = int(input.TableVal())\n\t\t\t\tcase \"Float\": df.iloc[row, column] = float(input.TableVal())\n\t\t\t\tcase \"String\": df.iloc[row, column] = input.TableVal()\n\n\n\tasync def Purge(self, input):\n\t\t\"\"\"\n\t\t@brief Purges the secondary cache of whatever the user has uploaded/selected\n\t\t@param input: The Shiny input. See N() for required objects.\n\t\t@info This function should be called on a reactive hook for a \"Reset\" button.\n\t\t\"\"\"\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\tdel self._secondary[n]\n\n\ndef NavBar(current):\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\treturn [\n\t\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\n\t\tui.navset_bar(\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/expression/site/index.html>Expression</a>'), value=\"Expression\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/pairwise/site/index.html>Pairwise</a>'), value=\"Pairwise\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/image/site/index.html>Image</a>'), value=\"Image\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/geomap/site/index.html>Geomap</a>'), value=\"Geomap\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/geocoordinate/site/index.html>Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/about/site/index.html>About</a>'), value=\"About\"),\n\t\t\t\ttitle=\"Heatmapper\",\n\t\t\t\tselected=current,\n\t\t)\n\t]\n\n\ndef FileSelection(examples, types):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t\"\"\"\n\n\t# If the user needs help with the formatting.\n\treturn [ui.HTML('<a href=https://wishartlab.github.io/heatmapper2/about/site/index.html>Data Format</a>'),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", \"Choose a File\", accept=types, multiple=False),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[10,2],\n\t\t)\n\t)]\n\n\n# The Table element\nTable = ui.nav_panel(\"Table\",\n\tui.layout_columns(\n\t\tui.input_numeric(\"TableRow\", \"Row\", 0),\n\t\tui.input_numeric(\"TableCol\", \"Column\", 0),\n\t\tui.input_text(\"TableVal\", \"Value\", 0),\n\t\tui.input_select(id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"]),\n\t\tcol_widths=[2,2,6,2],\n\t),\n\tui.layout_columns(\n\t\tui.input_action_button(\"Update\", \"Update\"),\n\t\tui.input_action_button(\"Reset\", \"Reset Values\"),\n\t),\n\tui.output_data_frame(\"LoadedTable\"),\n)\n", "type": "text"}]