[{"name": "app.py", "content": "#\n# Heatmapper\n# Image\n#\n# This file contains the ShinyLive application for Image Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom matplotlib.pyplot import subplots, colorbar\nfrom pandas import DataFrame\nfrom io import BytesIO\nfrom PIL import Image\n\nfrom shared import Table, Cache, NavBar, FileSelection\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\t# Information regarding example files.\n\tInfo = {\n\t\t\"example1.txt\": {\n\t\t\t\"Image\": \"example1.jpg\",\n\t\t\t\"Description\": \"Hypothetical example illustrating data overlaid on a satellite image. Input data are count or magnitude values within the overlaid grid sections.\"\n\t\t}\n\t}\n\n\tDataCache = Cache(\"image\")\n\n\tasync def LoadImage():\n\t\t\"\"\"\n\t\t@brief Loads the image to render behind the heatmap.\n\t\t@returns an Image object, if an image is specified, otherwise None.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.Image()\n\t\t\treturn None if file is None else Image.open(file[0][\"datapath\"])\n\t\telse:\n\t\t\tn = Info[input.Example()][\"Image\"]\n\t\t\tcache = DataCache.Cache()\n\t\t\tif n not in cache:\n\t\t\t\tcache[n] = Image.open(BytesIO(await DataCache.Download(DataCache.Source + n)))\n\t\t\treturn cache[n]\n\n\n\tasync def GenerateHeatmap():\n\t\t\"\"\"\n\t\t@brief Generates the heatmap, overlaying the Image with the DataFrame\n\t\t@returns The Plot's axis, for downloading purposes.\n\t\t\"\"\"\n\n\t\tdf = await DataCache.Load(input)\n\t\timg = await LoadImage()\n\n\t\tif df.empty: return None\n\n\t\t# Wrangle into an acceptable format.\n\t\tif {\"x\", \"y\", \"value\"}.issubset(df.columns):\n\t\t\tdf = df.pivot(index=\"y\", columns=\"x\", values=\"value\")\n\n\t\tfig, ax = subplots()\n\n\t\t# Add the image as an overlay, if we have one.\n\t\tif img is not None: ax.imshow(img, extent=[0, 1, 0, 1], aspect=\"auto\",zorder=0)\n\t\tim = ax.contourf(\n\t\t\tdf,\n\t\t\tcmap=input.ColorMap().lower(),\n\t\t\textent=[0, 1, 0, 1],\n\t\t\tzorder=1,\n\t\t\talpha=input.Opacity(),\n\t\t\talgorithm=input.Algorithm().lower(),\n\t\t\tlinestyles=input.Style().lower(),\n\t\t\tlevels=input.Levels(),\n\t\t)\n\n\t\t# Visibility of features\n\t\tif \"legend\" in input.Features(): colorbar(im, ax=ax, label=\"Value\")\n\n\t\tif \"y\" in input.Features():\n\t\t\tax.tick_params(axis=\"y\", labelsize=input.TextSize())\n\t\telse:\n\t\t\tax.set_yticklabels([])\n\n\t\tif \"x\" in input.Features():\n\t\t\tax.tick_params(axis=\"x\", labelsize=input.TextSize())\n\t\telse:\n\t\t\tax.set_xticklabels([])\n\n\t\treturn ax\n\n\n\t@output\n\t@render.data_frame\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, ignore_none=False, ignore_init=False)\n\tasync def LoadedTable(): return await DataCache.Load(input)\n\n\n\t@output\n\t@render.plot\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, input.TextSize, input.Opacity, input.ColorMap, input.Algorithm, input.Style, input.Levels, input.Features, ignore_none=False, ignore_init=False)\n\tasync def Heatmap(): return await GenerateHeatmap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()][\"Description\"]\n\n\n\t@render.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await DataCache.Load(input); yield df.to_string()\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Update)\n\tasync def Update(): await DataCache.Update(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Reset)\n\tasync def Reset(): await DataCache.Purge(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.TableRow, input.TableCol, input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateTableValue():\n\t\t\"\"\"\n\t\t@brief Updates the label for the Value input to display the current value.\n\t\t\"\"\"\n\t\tdf = await DataCache.Load(input)\n\n\t\trows, columns = df.shape\n\t\trow, column = int(input.TableRow()), int(input.TableCol())\n\n\t\tif 0 <= row <= rows and 0 <= column <= columns:\n\t\t\tui.update_text(id=\"TableVal\", label=\"Value (\" + str(df.iloc[row, column]) + \")\"),\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(\"Image\"),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(examples={\"example1.txt\": \"Example 1\"}, types=[\".csv\", \".txt\", \".xlsx\"]),\n\n\t\t\tui.panel_conditional(\"input.SourceFile === 'Upload'\", ui.input_file(\"Image\", \"Choose your Image File\", accept=[\".png\", \".jpg\"], multiple=False)),\n\n\t\t\t# Customize the text size of the axes.\n\t\t\tui.input_numeric(id=\"TextSize\", label=\"Text Size\", value=8, min=1, max=50, step=1),\n\n\t\t\t# Customize the opacity of the heatmap, making the background image more visible.\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\n\t\t\t# Set the ColorMap used.\n\t\t\tui.input_select(id=\"ColorMap\", label=\"Color Map\", choices=[\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\", \"Cividis\"], selected=\"Viridis\"),\n\n\t\t\t# https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf\n\t\t\tui.input_select(id=\"Algorithm\", label=\"Contour Algorithm\", choices=[\"MPL2005\", \"MPL2014\", \"Serial\", \"Threaded\"], selected=\"MPL2014\"),\n\n\t\t\t# https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf\n\t\t\tui.input_select(id=\"Style\", label=\" Line Style\", choices=[\"Solid\", \"Dashed\", \"Dashdot\", \"Dotted\"], selected=\"Solid\"),\n\n\t\t\tui.input_slider(id=\"Levels\", label=\"Number of Levels\", value=20, min=1, max=100, step=1),\n\n\t\t\t# Customize what aspects of the heatmap are visible\n\t\t\tui.input_checkbox_group(id=\"Features\", label=\"Heatmap Features\",\n\t\t\t\t\tchoices={\"x\": \"X Labels\", \"y\": \"Y Labels\", \"legend\": \"Legend\"},\n\t\t\t\t\tselected=[\"legend\"]),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.download_button(\"DownloadTable\", \"Download Table\"),\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_plot(\"Heatmap\", height=\"90vh\")),\n\t\t\t\tTable\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "shared.py", "content": "#\n# Heatmapper\n# Shared\n#\n# This file contains shared functionality between Heatmapper applications. It is not a standalone application.\n# Due to the way ShinyLive exports applications, this file is symlinked into each project to reduce redundancy.\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom sys import modules\nfrom copy import deepcopy\nfrom pathlib import Path\n\n# If pyodide is found, we're running WebAssembly.\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\n# Otherwise,\nelse:\n\tfrom os.path import exists\n\tPyodide = False\n\n\nTemporalColumns = {\"time\", \"date\"}\n\n\ndef Filter(columns, good_columns, bad_columns):\n\tret = None\n\tfor column in columns:\n\t\tlowered = column.lower()\n\t\tif lowered in good_columns:\n\t\t\treturn column\n\t\telif lowered in bad_columns:\n\t\t\tbreak\n\t\telif ret is not None:\n\t\t\tret = column\n\treturn ret\n\n\nclass Cache:\n\t\"\"\"\n\t@brief A class that encompasses fetching/storing web resources.\n\t\"\"\"\n\n\t@staticmethod\n\tdef DefaultHandler(n, i):\n\t\t\"\"\"\n\t\t@brief The default handler. It can handle csv, xlsx, and defaults all other files to read_table\n\t\t@param n: The name of the file. We use this for pattern matching against the suffix.\n\t\t@param i: The binary of the file (Either via read() or BytesIO())\n\t\t@returns: A null-filled DataFrame.\n\t\t\"\"\"\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": df = read_csv(i)\n\t\t\tcase \".xlsx\": df = read_excel(i)\n\t\t\tcase _: df = read_table(i)\n\t\treturn df.fillna(0)\n\n\n\t@staticmethod\n\tasync def Remote(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\n\n\n\t@staticmethod\n\tasync def Local(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\t\"\"\"\n\t\t@brief Initialize an instance of the Cache object.\n\t\t@param project: The name of the project. This is used to fetch web resources.\n\t\t@param DataHandler:\tThe function that should be called to process files. It should\n\t\t\t\t\t\t\t\t\t\t\t\ttake a name, and a binary stream, and return a DataFrame.\n\t\t\"\"\"\n\n\t\t# The primary cache is immutable, and is used when the resource has not been fetched before.\n\t\tself._primary = {}\n\n\t\t# The secondary cache is mutable, and is populated by the primary cache. Purge deletes from here.\n\t\tself._secondary = {}\n\n\t\t# The data handler for processing the binary files.\n\t\tself._handler = DataHandler\n\n\t\t# If we're in a Pyodide environment, we fetch resources from the web.\n\t\tif Pyodide:\n\t\t\tself.Download = lambda url: Cache.Remote(url)\n\t\t\tself.Source = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/{}/example_input/\".format(project)\n\n\t\t# Otherwise, we fetch locally.\n\t\telse:\n\t\t\tself.Download = lambda url: Cache.Local(url)\n\t\t\tself.Source = \"../example_input/\"\n\n\n\tasync def Load(self, input, copy=False):\n\t\tn = await self.N(input);\n\t\tdf = DataFrame() if n is None else self._secondary[n]\n\t\treturn deepcopy(df) if copy else df\n\n\n\tasync def N(self, input):\n\t\t\"\"\"\n\t\t@brief Caches whatever the user has currently uploaded/selection, returning the identifier within the secondary cache.\n\t\t@param input: The Shiny input variable. Importantly, these must be defined:\n\t\t\tinput.File: The uploaded file\n\t\t\tinput.Example: The selected example file\n\t\t\tinput.SourceFile: Whether the user wants \"Upload\" or \"Example\"\n\t\t@returns: The identifier. You should probably use Load() unless you need this.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\n\t\t\t# Populate the base cache, if we need to\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, read(file[0][\"datapath\"], \"wb\"))\n\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, BytesIO(await self.Download(self.Source + n)))\n\t\tif n not in self._secondary: self._secondary[n] = deepcopy(self._primary[n])\n\t\treturn n\n\n\n\tdef Cache(self): return self._secondary\n\n\n\tasync def Update(self, input):\n\t\t\"\"\"\n\t\t@brief Updates information within the secondary cache based on user selection\n\t\t@param input: The Shiny input. Importantly, these must be defined:\n\t\t\tinput.TableRow: The row to modify\n\t\t\tinput.TableCol: The column to modify\n\t\t\tinput.TableVal: What the user wants to set as the new value\n\t\t@info This function should be called on a reactive hook for a \"Update\" button.\n\t\t\"\"\"\n\n\t\t# Get the data\n\t\tdf = await self.Load(input)\n\t\trow_count, column_count = df.shape\n\t\trow, column = input.TableRow(), input.TableCol()\n\n\t\t# So long as row and column are sane, update.\n\t\tif row < row_count and column < column_count:\n\t\t\tmatch input.Type():\n\t\t\t\tcase \"Integer\": df.iloc[row, column] = int(input.TableVal())\n\t\t\t\tcase \"Float\": df.iloc[row, column] = float(input.TableVal())\n\t\t\t\tcase \"String\": df.iloc[row, column] = input.TableVal()\n\n\n\tasync def Purge(self, input):\n\t\t\"\"\"\n\t\t@brief Purges the secondary cache of whatever the user has uploaded/selected\n\t\t@param input: The Shiny input. See N() for required objects.\n\t\t@info This function should be called on a reactive hook for a \"Reset\" button.\n\t\t\"\"\"\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\tdel self._secondary[n]\n\n\ndef NavBar(current):\n\t\"\"\"\n\t@brief Returns a Navigation Bar for each project, with the current project selected.\n\t@returns A list, containing a ui.panel_title, and a ui.navset_bar.\n\t\"\"\"\n\n\treturn [\n\t\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\n\t\tui.navset_bar(\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html>Expression</a>'), value=\"Expression\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html>Pairwise</a>'), value=\"Pairwise\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html>Image</a>'), value=\"Image\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html>Geomap</a>'), value=\"Geomap\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html>Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>About</a>'), value=\"About\"),\n\t\t\t\ttitle=\"Heatmapper\",\n\t\t\t\tselected=current,\n\t\t)\n\t]\n\n\ndef FileSelection(examples, types):\n\t\"\"\"\n\t@brief Returns the file selection dialog for the user to upload/select an example\n\t@param examples: Either a list of example file names, or a dictionary mapping\n\t@param types: The valid file extensions for user uploaded files.\n\t@returns A list, containing the necessary ui components for uploading/selecting\n\t@info The returns elements are named:\n\t\tinput.SourceFile: The ui.input_radio_buttons for whether the user wants to choose an \"Example\" or \"Upload\"\n\t\tinput.File: The ui.input_file for user uploaded files.\n\t\tinput.Example: The ui.input_select for an example file selection\n\t\"\"\"\n\n\t# If the user needs help with the formatting.\n\treturn [ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>'),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", \"Choose a File\", accept=types, multiple=False),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[10,2],\n\t\t)\n\t)]\n\n\n# The Table element\nTable = ui.nav_panel(\"Table\",\n\tui.layout_columns(\n\t\tui.input_numeric(\"TableRow\", \"Row\", 0),\n\t\tui.input_numeric(\"TableCol\", \"Column\", 0),\n\t\tui.input_text(\"TableVal\", \"Value\", 0),\n\t\tui.input_select(id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"]),\n\t\tcol_widths=[2,2,6,2],\n\t),\n\tui.layout_columns(\n\t\tui.input_action_button(\"Update\", \"Update\"),\n\t\tui.input_action_button(\"Reset\", \"Reset Values\"),\n\t),\n\tui.output_data_frame(\"LoadedTable\"),\n)\n", "type": "text"}]